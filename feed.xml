<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://xlcbingo1999.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://xlcbingo1999.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2024-02-20T13:17:59+00:00</updated><id>https://xlcbingo1999.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">高性能任务级运行时平台 - Legion软件生态</title><link href="https://xlcbingo1999.github.io/blog/2024/Legion-Stack-Intro/" rel="alternate" type="text/html" title="高性能任务级运行时平台 - Legion软件生态"/><published>2024-01-06T00:00:00+00:00</published><updated>2024-01-06T00:00:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2024/Legion-Stack-Intro</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2024/Legion-Stack-Intro/"><![CDATA[<p>Redirecting to Introduction of Legion Software Stack.</p>]]></content><author><name></name></author><category term="Slide"/><category term="系统类笔记"/><summary type="html"><![CDATA[Introduction of Legion Software Stack]]></summary></entry><entry><title type="html">CMake和Makefile相关学习</title><link href="https://xlcbingo1999.github.io/blog/2023/CMake-learning/" rel="alternate" type="text/html" title="CMake和Makefile相关学习"/><published>2023-12-27T17:39:00+00:00</published><updated>2023-12-27T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/CMake-learning</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/CMake-learning/"><![CDATA[<h2 id="cmake">CMake</h2> <h3 id="cmake-通常的-build-和编译位置">CMake 通常的 build 和编译位置</h3> <ul> <li>参考文献：<a href="https://blog.csdn.net/shaoyou223/article/details/84764633">https://blog.csdn.net/shaoyou223/article/details/84764633</a></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 方案1: 创建</span>
<span class="nb">mkdir </span>build
<span class="nb">cd </span>build
cmake ..
make
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 方案2: 直接在主目录下进行</span>
cmake <span class="nt">-S</span> <span class="nb">.</span> <span class="nt">-B</span> build
cmake <span class="nt">--build</span>
</code></pre></div></div> <h3 id="ubuntu-安装-cmake">Ubuntu 安装 CMake</h3> <ul> <li>参考文献：<a href="https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line">https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line</a></li> <li>需要安装新版的 CMake 的时候就需要用这个文章里提到的方法</li> </ul> <h3 id="cmakelists-的编写规则">CMakelists 的编写规则</h3> <ul> <li>号称是全网最全的规则：<a href="https://zhuanlan.zhihu.com/p/534439206">https://zhuanlan.zhihu.com/p/534439206</a></li> </ul> <h3 id="fetchcontent-依赖库">FetchContent 依赖库</h3> <ul> <li>参考文献：<a href="https://juejin.cn/post/7102762548423819272">https://juejin.cn/post/7102762548423819272</a></li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># FetchContent 模块用于获取外部依赖库, 在构建生成文件的过程中被调用
</span><span class="n">include</span><span class="p">(</span><span class="n">FetchContent</span><span class="p">)</span>
<span class="cp"># FetchContent_Declare 描述如何下载依赖库
</span><span class="n">FetchContent_Declare</span><span class="p">(</span>
    <span class="n">pybind11</span>
    <span class="n">GIT_REPOSITORY</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/pybind/pybind11.git</span>
    <span class="n">GIT_TAG</span>        <span class="n">v2</span><span class="mf">.6.2</span>
    <span class="n">GIT_SHALLOW</span>    <span class="n">TRUE</span>
<span class="p">)</span>
<span class="cp"># FetchContent_MakeAvaliable 下载依赖库, 并使其可用
</span><span class="n">FetchContent_MakeAvailable</span><span class="p">(</span><span class="n">pybind11</span><span class="p">)</span>
</code></pre></div></div> <h3 id="cmake-的多版本共存">CMake 的多版本共存</h3> <ul> <li>请不要直接删除 cmake，可能会导致一些文件被删除</li> <li>多版本共存 CMake 参考文献：<a href="https://zhuanlan.zhihu.com/p/442561052">https://zhuanlan.zhihu.com/p/442561052</a></li> </ul> <h3 id="cmakepresets-简化-cmake-项目初始化繁杂步骤">CMakePresets: 简化 CMake 项目初始化繁杂步骤</h3> <ul> <li>参考文献：<a href="https://cloud.tencent.com/developer/article/2348379">https://cloud.tencent.com/developer/article/2348379</a></li> <li> <p>针对不同平台的 CMake 指令主流配置方案</p> <ul> <li>缺点：命令非常长，配置可能不同开发机器上都不一样，对工程在不同设备上编译带来很大的挑战，非常容易编译出错。而且在版本迭代过程中，工程的配置是不断在更新的，很容易忘记去修改 README 或者项目文档导致一些历史的编译脚本缺少一些关键指令丢失内容，这不符合 GitOps 思想。</li> </ul> </li> </ul> <table> <thead> <tr> <th>参数</th> <th>Win</th> <th>Linux</th> <th>macOS</th> <th>iOS</th> <th>Android</th> <th> </th> </tr> </thead> <tbody> <tr> <td>-G [用于指定生成器（Generator），即指定生成的项目文件（例如 Makefile、Visual Studio 项目文件等）的类型]</td> <td>Visual Studio</td> <td>Unix Makefiles</td> <td>Xcode</td> <td>Xcode</td> <td> </td> <td> </td> </tr> <tr> <td>-A [ 用于指定目标平台的体系结构（Architecture）]</td> <td>Win32/x64</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td>-DCMAKE_OSX_ARCHITECTURES [用于定义 CMake 变量]</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td>-DTOOLSETS</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td>-DCMAKE_SYSTEM_NAME</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> </tbody> </table> <ul> <li> <p>CMakePreset 的动机</p> <ul> <li>虽然不同的 IDE 或代码编辑器工具有提供一些自己的 CMake 初始化配置能力（如 Visual Studio Code 可通过 .vscode/settings.json 来配置一些默认值）但这都不是通用方案。每个人使用的开发工具都各要求。特别是开源项目，如果没有提供一套全平台对各类工具都支持的配置文件，这会让开发者在工程配置上就被劝退。所以我们期望对项目工程化改造的目标不仅仅是解决上面的痛苦问题，更期望能让开发人员在接手项目时不需要在编译工具链、工程配置上花费太多的心思，让主流的开发工具打开工程开箱即用。</li> <li>为了实现这个目标，CMake 从 3.19 版本就开始支持了 CMakePresets.json 配置。如果你的版本还低于 3.19 请尽快升级来体验下 C/C++ 生态工具链的魅力。</li> </ul> </li> <li> <p>CMakePreset 的几个阶段</p> <ul> <li>configure</li> <li>build</li> <li>test 【可选】</li> <li>package 【可选】</li> </ul> </li> <li> <p>常用的指令</p> <ul> <li><code class="language-plaintext highlighter-rouge">cmake --list-presets</code> ： 查看当前支持的配置</li> <li><code class="language-plaintext highlighter-rouge">cmake --preset=ios-release-arm64</code>：configure</li> <li><code class="language-plaintext highlighter-rouge">cmake --build --preset=ios-release-arm64</code>：build 阶段</li> </ul> </li> <li> <p>一个完整的 Preset 的例子</p> </li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  <span class="s2">"version"</span>: 3,
  <span class="s2">"cmakeMinimumRequired"</span>: <span class="o">{</span>
    <span class="s2">"major"</span>: 3,
    <span class="s2">"minor"</span>: 19,
    <span class="s2">"patch"</span>: 0
  <span class="o">}</span>,
  <span class="s2">"configurePresets"</span>: <span class="o">[</span> <span class="c"># configure阶段的配置</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"hidden"</span>: <span class="nb">true</span>,
      <span class="s2">"condition"</span>: <span class="o">{</span>
        <span class="s2">"type"</span>: <span class="s2">"equals"</span>,
        <span class="s2">"lhs"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">hostSystemName</span><span class="k">}</span><span class="s2">"</span>,
        <span class="s2">"rhs"</span>: <span class="s2">"Darwin"</span>
      <span class="o">}</span>,
      <span class="s2">"generator"</span>: <span class="s2">"Xcode"</span>,
      <span class="s2">"warnings"</span>: <span class="o">{</span><span class="s2">"dev"</span>: <span class="nb">true</span>, <span class="s2">"deprecated"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"OFF"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin 10.14+ (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS - Debug Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"ON"</span>,
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Debug"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/darwin-debug"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin arm64 10.14+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS arm64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-darwin-arm64-realese"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"arm64"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-arm64"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/darwin-release-arm64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-x86_64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin x86_64 10.14+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS x86_64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-darwin-x86_64-realese"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/darwin-release-x86_64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-arm64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS arm64 9.0+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS arm64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-ios-arm64-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"iOS"</span>,
        <span class="s2">"CMAKE_OSX_DEPLOYMENT_TARGET"</span>: <span class="s2">"9.0"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"arm64"</span>,
        <span class="s2">"CMAKE_OSX_SYSROOT"</span>: <span class="s2">"iphoneos"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/ios-arm64-iphoneos"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/ios-release-arm64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-armv7"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS armv7 9.0+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS armv7 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-ios-armv7-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"iOS"</span>,
        <span class="s2">"CMAKE_OSX_DEPLOYMENT_TARGET"</span>: <span class="s2">"9.0"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"armv7"</span>,
        <span class="s2">"CMAKE_OSX_SYSROOT"</span>: <span class="s2">"iphoneos"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/ios-armv7-iphoneos"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/ios-release-armv7"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-x86_64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS x86_64 9.0+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS x86_64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-ios-x86_64-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"iOS"</span>,
        <span class="s2">"CMAKE_OSX_DEPLOYMENT_TARGET"</span>: <span class="s2">"9.0"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"x86_64"</span>,
        <span class="s2">"CMAKE_OSX_SYSROOT"</span>: <span class="s2">"iphonesimulator"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/ios-x86_64-iphonesimulator"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/ios-release-x86_64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"hidden"</span>: <span class="nb">true</span>,
      <span class="s2">"condition"</span>: <span class="o">{</span>
        <span class="s2">"type"</span>: <span class="s2">"equals"</span>,
        <span class="s2">"lhs"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">hostSystemName</span><span class="k">}</span><span class="s2">"</span>,
        <span class="s2">"rhs"</span>: <span class="s2">"Darwin"</span>
      <span class="o">}</span>,
      <span class="s2">"warnings"</span>: <span class="o">{</span><span class="s2">"dev"</span>: <span class="nb">true</span>, <span class="s2">"deprecated"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"OFF"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86_64 abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86_64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-x86_64-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"x86_64"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-x86_64-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-x86_64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86 abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-x86-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"x86"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-x86-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-x86"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android armeabi-v7a abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android armeabi-v7a - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-armeabi-v7a-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"armeabi-v7a"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-armeabi-v7a-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-armeabi-v7a"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-arm64-v8a"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android arm64-v8a abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android arm64-v8a - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-arm64-v8a-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"arm64-v8a"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-arm64-v8a-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-arm64-v8a"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"hidden"</span>: <span class="nb">true</span>,
      <span class="s2">"condition"</span>: <span class="o">{</span>
        <span class="s2">"type"</span>: <span class="s2">"equals"</span>,
        <span class="s2">"lhs"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">hostSystemName</span><span class="k">}</span><span class="s2">"</span>,
        <span class="s2">"rhs"</span>: <span class="s2">"Windows"</span>
      <span class="o">}</span>,
      <span class="s2">"generator"</span>: <span class="s2">"Visual Studio 15 2017"</span>,
      <span class="s2">"warnings"</span>: <span class="o">{</span><span class="s2">"dev"</span>: <span class="nb">true</span>, <span class="s2">"deprecated"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/exports"</span>,
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"OFF"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"windows-debug"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows x64 (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Debug Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build"</span>,
      <span class="s2">"architecture"</span>: <span class="o">{</span>
        <span class="s2">"value"</span>: <span class="s2">"x64"</span>,
        <span class="s2">"strategy"</span>: <span class="s2">"set"</span>
      <span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Debug"</span>,
        <span class="s2">"CMAKE_DEBUG_POSTFIX"</span>: <span class="s2">"d"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-x64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows x64 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-win32-x64"</span>,
      <span class="s2">"architecture"</span>: <span class="o">{</span>
        <span class="s2">"value"</span>: <span class="s2">"x64"</span>,
        <span class="s2">"strategy"</span>: <span class="s2">"set"</span>
      <span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/win32-release-x64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-ia32"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows ia32 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-win32-ia32"</span>,
      <span class="s2">"architecture"</span>: <span class="o">{</span>
        <span class="s2">"value"</span>: <span class="s2">"Win32"</span>,
        <span class="s2">"strategy"</span>: <span class="s2">"set"</span>
      <span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/win32-release-ia32"</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"buildPresets"</span>: <span class="o">[</span> <span class="c"># build阶段的配置</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-debug"</span>, <span class="c"># 依赖的configure阶段</span>
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin Local Compilation (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS - Debug Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Debug"</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-x86_64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS arm64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-arm64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"ios-release-arm64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS arm64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS arm64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-armv7"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"ios-release-armv7"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS armv7 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS armv7 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-x86_64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"ios-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86_64-strip"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install/strip"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86-strip"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install/strip"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android armeabi-v7a Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android armeabi-v7a - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-armeabi-v7a-strip"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android armeabi-v7a Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android armeabi-v7a - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install/strip"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-arm64-v8a"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-arm64-v8a"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android arm64-v8a Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android arm64-v8a - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"windows-debug"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"windows-debug"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows Local Compilation (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Debug Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Debug"</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-x64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"win32-release-x64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows x64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows x64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-ia32"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"win32-release-ia32"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows ia32 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows ia32 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"testPresets"</span>: <span class="o">[</span> <span class="c"># test阶段的配置</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"output"</span>: <span class="o">{</span><span class="s2">"outputOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"execution"</span>: <span class="o">{</span><span class="s2">"noTestsAction"</span>: <span class="s2">"error"</span>, <span class="s2">"stopOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"output"</span>: <span class="o">{</span><span class="s2">"outputOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"execution"</span>: <span class="o">{</span><span class="s2">"noTestsAction"</span>: <span class="s2">"error"</span>, <span class="s2">"stopOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="cmake-的-generator-相关知识">CMake 的 Generator 相关知识</h3> <ul> <li>cmake 会通过 cmakelist.txt 文件，生成适用于不同项目类型的 makefile 文件，然后 makefile 文件被不同的编译器使用进行编译，考虑到 C/C++ 的开发环境之多，有非常多的种类的项目开发环境，但是 cmake 基本上都考虑到了，这里做一个小的汇总。 <ul> <li>Visual Studio 6: 生成 Visual Studio 6 工程文件。</li> <li>Visual Studio 7: 生成 Visual Studio .NET 2002 工程文件。</li> <li>Visual Studio 10: 生成 Visual Studio 10(2010) 工程文件。</li> <li>Visual Studio 10 Win64 会生成 x64 平台的工程;Visual Studio 10 IA64 是 Itanium 平台。</li> <li>Visual Studio 11: 生成 Visual Studio 11(2012) 工程文件。</li> <li>Visual Studio 11 Win64 会生成 x64 平台的工程;Visual Studio 11 ARM 是 ARM 平台。</li> <li>Visual Studio 7 .NET 2003: 生成 Visual Studio 7 .NET 2003 工程文件。</li> <li>Visual Studio 8 2005: 生成 Visual Studio 8 2005 工程文件。</li> <li>Visual Studio 8 2005 Win64 会生成 x64 平台的工程。</li> <li>Visual Studio 9 2008: 生成 Visual Studio 9 2008 工程文件。</li> <li>Visual Studio 9 2008 Win64 会生成 x64 平台的工程;Visual Studio 9 2008 IA64 是 Itanium 平台。</li> <li>Borland Makefiles: 生成 Borland makefile。</li> <li>NMake Makefiles: 生成 NMake makefile。</li> <li>NMake Makefiles JOM: 生成 JOM makefile。</li> <li>Watcom WMake: 生成 Watcom WMake makefiles。</li> <li>MSYS Makefiles: 生成 MSYS makefile。 生成的 makefile 用 /bin/sh 作为它的 shell。在运行 CMake 的机器上需要安装 msys</li> <li>MinGW Makefiles: 生成供 mingw32-make 使用的 make file。 生成的 makefile 使用 cmd.exe 作为它的 shell。生成它们不需要 msys 或者 unix shell。</li> <li>Unix Makefiles: 生成标准的 UNIX makefile。 在构建树上生成分层的 UNIX makefile。任何标准的 UNIX 风格的 make 程序都可以通过默认的 make 目标构建工程。生成的 makefile 也提供了 install 目标。</li> <li>Ninja：生成.ninja 工程</li> <li>Xcode：生成 Xcode 工程</li> <li>CodeBlocks - MinGW Makefiles：生成 CodeBlocks 工程。</li> <li>在顶层目录以及每层子目录下为 CodeBlocks 生成工程文件，生成的 CMakeList.txt 的特点是都包含一个 PROJECT()调用。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>CodeBlocks - NMake Makefiles：生成 CodeBlocks 工程。 在顶层目录以及每层子目录下为 CodeBlocks 生成工程文件，生成的 CMakeList.txt 的特点是都包含一个 PROJECT()调用。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>CodeBlocks - Ninja：生成 CodeBlocks 工程。</li> <li>CodeBlocks - Unix Makefiles：生成 CodeBlocks 工程。 在顶层目录以及每层子目录下为 CodeBlocks 生成工程文件，生成的 CMakeList.txt 的特点是都包含一个 PROJECT()调用。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>Eclipse CDT4 - MinGW Makefiles: 生成 Eclipse CDT 4.0 工程文件。 在顶层目录下为 Eclipse 生成工程文件。在运行源码外构建时，一个连接到顶层源码路径的资源文件会被创建。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>Eclipse CDT4 - NMake Makefiles: 生成 Eclipse CDT 4.0 工程文件。 在顶层目录下为 Eclipse 生成工程文件。在运行源码外构建时，一个连接到顶层源码路径的资源文件会被创建。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>Eclipse CDT4 - NMake Makefiles：生成 Eclipse CDT 4.0 工程文件。</li> <li>Eclipse CDT4 - Ninja：生成 Eclipse CDT 4.0 工程文件。</li> <li>Eclipse CDT4 - Unix Makefiles: 生成 Eclipse CDT 4.0 工程文件。 在顶层目录下为 Eclipse 生成工程文件。在运行源码外构建时，一个连接到顶层源码路径的资源文件会被创建。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>KDevelop3: 生成 KDevelop 3 工程文件。</li> <li>KDevelop3 - Unix Makefiles: 生成 KDevelop 3 工程文件。</li> <li>Sublime Text 2 - MinGW Makefiles: 生成 Sublime Text 2 工程文件。</li> <li>Sublime Text 2 - NMake Makefiles: 生成 Sublime Text 2 工程文件。</li> <li>Sublime Text 2 - Ninja: 生成 Sublime Text 2 工程文件。</li> <li>Sublime Text 2 - Unix Makefiles: 生成 Sublime Text 2 工程文件。</li> </ul> </li> </ul> <h2 id="makefile">Makefile</h2>]]></content><author><name></name></author><category term="技术杂记"/><category term="技术杂记"/><summary type="html"><![CDATA[CMake和Makefile相关学习]]></summary></entry><entry><title type="html">体系结构相关技术</title><link href="https://xlcbingo1999.github.io/blog/2023/Arch/" rel="alternate" type="text/html" title="体系结构相关技术"/><published>2023-11-20T17:39:00+00:00</published><updated>2023-11-20T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/Arch</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/Arch/"><![CDATA[<h2 id="服务器查看物理cpu和逻辑cpu的情况">服务器查看物理cpu和逻辑cpu的情况</h2> <ul> <li>参考文献：<a href="https://blog.csdn.net/maizousidemao/article/details/103595846">https://blog.csdn.net/maizousidemao/article/details/103595846</a></li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l

cat /proc/cpuinfo| grep "cpu cores"| uniq

cat /proc/cpuinfo| grep "processor"| wc -l

grep 'processor' /proc/cpuinfo | sort -u | wc -l
</code></pre></div></div>]]></content><author><name></name></author><category term="技术杂记"/><category term="技术杂记"/><summary type="html"><![CDATA[体系结构相关技术]]></summary></entry><entry><title type="html">阅读笔记 - (MobiCom’23) Cost-effective On-device Continual Learning over Memory Hierarchy with Miro</title><link href="https://xlcbingo1999.github.io/blog/2023/MobiCom23-Miro/" rel="alternate" type="text/html" title="阅读笔记 - (MobiCom’23) Cost-effective On-device Continual Learning over Memory Hierarchy with Miro"/><published>2023-11-12T17:39:00+00:00</published><updated>2023-11-12T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/MobiCom23-Miro</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/MobiCom23-Miro/"><![CDATA[<h2 id="作者优点和问题">作者、优点和问题</h2> <ul> <li>优点 <ul> <li>12 月发现代码开源，很伟大，代码写的算是不错的，结构清晰，代理设置得很好，值得学习：<a href="https://github.com/omnia-unist/Miro">https://github.com/omnia-unist/Miro</a></li> <li>针对持续学习（CL）的新场景提出算法</li> <li>根据持续学习场景中的资源动态变化情况来动态配置 CL 系统，以获得最优的成本效应</li> <li>HEM 可以让数据更加充分地混合？避免 Non-iid 的场景</li> <li>这张图画的很好，体现了“权衡”的特点。也能看出来，accuracy 的边际效应递减，energy 的增长是比较偏线性的</li> </ul> </li> <li>问题： <ul> <li>为什么是多个 task? =&gt; xlc: 感觉这个场景又有点像我之前做的那个隐私预算分配的场景，然后把 cache 加进来…</li> <li>整篇工作基本都是在讲测量的事情，测量的基本基本上都是那种最边界的结果，因此完全不需要任何的算法就写完了这篇文章….</li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="introduction">Introduction</h2> <ul> <li>CL 范式：随着新数据的到达，模型要从新数据的中逐步学习知识。</li> <li>挑战 <ul> <li>灾难性遗忘（catastrophic forgetting）：在学习新的知识之后很快就遗忘了 =&gt; 解决方案：情景记忆（Episodic Memory, EM），同时基于深度存储器结构（HEM）将存储分为快速访问的小存储器和慢速访问的大存储器 =&gt; xlc: 感觉出现了可以针对内存空间做调度的点了！类似强化学习的 Replay Buffer，只要在讲一下边缘设备具有严格的内存容量限制就可以做调度了……</li> </ul> </li> <li>贡献 <ul> <li>Systematic study of on-device CL：测量</li> <li>System runtime for HEM：从 insight 来优化 HEM 以实现成本增益，主要配置以下表中的参数来获得最优的调度方案 <ul> <li>Capacity：文章描述中对性能影响不太关键，似乎是通过限制 I/O 来实现的【在 <a href="https://we5lw6jk7r.feishu.cn/wiki/N9dmwc1vXiNkf5k0GH5cXKXknKb">Jellyfish Testbed</a> 的源码实现中，似乎可以为每个进程提供独立的带宽约束，这让实验成为可能！】</li> <li>(Accuracy-Energy) Trade-off：对性能影响最大，通过修改 EM size 和 SB size 来实现【】</li> <li>Static：似乎就外部设置？不去进行优化</li> </ul> </li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="continual-learning-on-hem">CONTINUAL LEARNING ON HEM</h2> <h3 id="workflow">Workflow</h3> <ul> <li>简单描述了非层级式的存储结构不能满足速度的需求和空间的需求 <ul> <li><strong>B</strong>uffering：Stream Buffer(SB)的大小需要依赖于任务的学习方法</li> <li><strong>T</strong>raining：训练</li> <li><strong>S</strong>wapping：将 in-memory 的样本和 in-storage 的样本进行交换</li> <li><strong>F</strong>lushing：在 Task N 完成之后，EM 会用 SB 中的样本进行更新，如果 EM 的内存空间不足，HEM 就会使用采样策略。旧的任务应该将一些样本驱逐出去避免对内存空间的占用。SB 中的数据需要被刷到 Storage 中。</li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="data-diversity">Data Diversity</h3> <ul> <li>在 Storage 中的数据有一天也会被使用，避免出现遗忘问题</li> </ul> <h2 id="miro-system-runtime">MIRO: SYSTEM RUNTIME</h2> <h3 id="design-overview">Design Overview</h3> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="data-swapping-strategy">Data Swapping Strategy</h3> <ul> <li>三个原则 <ul> <li>(P1) I/O energy consumption is insignificant. I/O 能耗微不足道。</li> <li>(P2) Increasing the swap ratio provides benefits across a broad range, with a knee point appearing at a relatively low swap ratio (15–20%) in the ratio-accuracy curve, as demonstrated in Figure 6. 提高 swap ratio 可以带来广泛的好处，在 ratio-accuracy curve 中，拐点出现在相对较低的 swap ratio（15-20%）处</li> <li>(P3) Other programs running on the device can abruptly compete for I/O resources. But, under normal circumstances, HW typically allows training jobs to leverage ample bandwidth for full-fledged data swapping. 设备上运行的其他程序可能会突然竞争 I/O 资源。但是，在正常情况下，硬件通常允许训练作业利用充足的带宽来进行全面的数据交换。</li> </ul> </li> <li>实际的 data swapping 算法 <ul> <li>Data swapping 策略：类似 TCP 的拥塞控制，先从 100%-&gt;50%-&gt;25%。Miro 通过首先增加交换间隔来降低交换比率。我们发现更新间隔值对于 100% 到 20% 范围内的 swap ratio 是有利的。然而，对于低于 20% 的掉期比率，我们将间隔固定在 5 个 epoch，并适当调整 swap ratio 以达到所需的 target swap ratio。</li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="stream-buffer-and-em-sizes">Stream Buffer and EM Sizes</h3> <h4 id="our-method">Our Method</h4> <ul> <li>决定 EM 和 SB 的大小的策略：Miro 系统中的 config 选取是一种非常启发式的方案，根据 SB 和 EM 的大小构建一个表，然后每个方法都去试，计算得到$util = \frac{acc\ gain}{energy\ usage}$，然后选择出一个剪切线 cutline，在这个区间里面的可以成为 configs 的候选。【本文是实验验证 20%-50% 的剪切线范围效果比较好】</li> </ul> <h4 id="有借鉴意义profiling-at-low-overhead">[有借鉴意义]Profiling at Low Overhead</h4> <ul> <li>A1) Avoid exhaustive profiling that covers all size variations. Profile a small subset of confs. <ul> <li>本文的解决方案：通过均匀采样实例来减少 conf 的数量。【因为过去的 conf 可能无法表达出未来 conf 的重要性】</li> </ul> </li> <li>A2.1) Do not use the entire training data that includes all stream buffer and EM samples. Use a subset of the data. <ul> <li>本文的解决方案：降低 Training Samples 的数量，</li> </ul> </li> <li>A2.2) Do not go through all epochs. Perform training for a small number of epochs and infer the accuracy that could be obtained if there were many more epochs. <ul> <li>本文的解决方案：降低 Epochs，不需要完整进行 profile【比如只执行 5 个 epoches】，可以考虑像 Optimus 一样进行插值啥的</li> </ul> </li> </ul> <h4 id="tying-all-together-in-miro-workflow">Tying All Together in Miro Workflow</h4>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[阅读笔记 - (MobiCom'23) Cost-effective On-device Continual Learning over Memory Hierarchy with Miro]]></summary></entry><entry><title type="html">阅读笔记 - (NSDI’22) Ekya Continuous Learning of Video Analytics Models on Edge Compute Servers</title><link href="https://xlcbingo1999.github.io/blog/2023/NSDI22-Ekya/" rel="alternate" type="text/html" title="阅读笔记 - (NSDI’22) Ekya Continuous Learning of Video Analytics Models on Edge Compute Servers"/><published>2023-10-17T17:39:00+00:00</published><updated>2023-10-17T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/NSDI22-Ekya</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/NSDI22-Ekya/"><![CDATA[<h2 id="作者优点和问题">作者、优点和问题</h2> <ul> <li>问题 <ul> <li>可否结合 serverless 进来，做 edge serverless continuous learning? =&gt; scale to zero 之后冷启动 load 数据的时间会变得很长，如果有一些预处理和预加载就会好很多了 <ul> <li>参考文章：EAVS: Edge-assisted Adaptive Video Streaming with Fine-grained Serverless Pipelines</li> <li>参考文章：Serverless empowered video analytics for ubiquitous networked cameras</li> </ul> </li> <li>可否重用 cached history models？</li> </ul> </li> <li>优点 <ul> <li>算是针对 Continuous Learning of Video Analytics Models 中进行 GPU 资源分配的开山作品！</li> </ul> </li> </ul> <h2 id="introduction">Introduction</h2> <ul> <li>数据漂移 <ul> <li>解决方案 1：模型压缩</li> <li>解决方案 2：持续模型重训练 <ul> <li>retraining window，</li> <li>tradeoff between the** live inference accuracy** and **drop in accuracy **due to data drift</li> <li>如果可以给更多的资源进行训练，那么更新的模型就可以更快的上线交付使用。如果在推理集群中拿走资源可能会降低推理的准确性【因为为了更好的服务质量，需要计算资源进行预处理】</li> </ul> </li> </ul> </li> <li>论文问题和挑战 <ul> <li>决策变量：在每个 retraining window 中，决策哪些 edge model 需要被重训练； 在重训练任务和推理任务中分配 GPU 资源； 针对重训练和推理任务选择配置方案</li> <li>目标：最大化 retraining window 中的平均推理 acc</li> <li>挑战： <ul> <li>Different from (i) video inference systems that optimize <strong>only the instantaneous accuracy</strong> (ii) model training systems that optimize <strong>only the eventual accuracy</strong></li> <li>The** decision space is multi-dimensional **consisting of a diverse set of retraining and inference configurations, and choices of resource allocations over time.</li> <li>It is difficult to know the **performance **of different configurations (in resource usage and accuracy) as it requires actually retraining using different configurationsI</li> </ul> </li> </ul> </li> <li>论文的贡献 <ul> <li>resource scheduler：（1）GPU 分配按照预先定义的粗粒度分数进行分配； （2）不会在 retraining 阶段去改变分配方案，避免了更复杂的场景； （3）micro-profiler 可以进行剪枝</li> <li>micro-profiler： 测量分配 100% 的 GPU 的时候每个 epoch 的 retraining 持续时间，并根据不同的 epoch、allocation 和 training data size 进行缩放。</li> </ul> </li> </ul> <h2 id="continuous-training-on-edge-compute">Continuous training on edge compute</h2> <h3 id="21-edge-computing-for-video-analytics">2.1 Edge Computing for Video Analytics</h3> <ul> <li>在视频分析任务中采用边缘计算的原因： <ul> <li>Uplink networks to the cloud are expensive</li> <li>Network links out of the edge locations experience outages</li> <li>Videos often contain sensitive and private data that users do not want sent to the cloud</li> </ul> </li> </ul> <h3 id="22-compressed-dnn-models-and-data-drift">2.2 Compressed DNN Models and Data drift</h3> <ul> <li>Data drift <ul> <li>如果使用模型压缩会出现问题</li> </ul> </li> <li>Continuous training <ul> <li>本文对 iCaRL 进行了改进，用于适配 changing characteristics</li> </ul> </li> </ul> <h3 id="23-accuracy-benefits-of-continuous-learning">2.3 Accuracy benefits of continuous learning</h3> <ul> <li>切分 Cityscapes 数据集到固定的 retraining windows 中 =&gt; 其实本质上就是 task 划分 =&gt; 突出一个 non-iid 场景</li> <li>本质上还是在做 CIL？？</li> </ul> <h2 id="3-scheduling-retraining-and-inference-jointly">3 Scheduling retraining and inference jointly</h2> <h3 id="31-configuration-diversity-of-retraining-and-inference">3.1 Configuration diversity of retraining and inference</h3> <h3 id="32-illustrative-scheduling-example">3.2 Illustrative scheduling example</h3> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY-480.webp 480w, /assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY-800.webp 800w, /assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="4-ekya-solution-description">4 Ekya: Solution Description</h2> <h3 id="41-formulation-of-joint-inference-and-retraining">4.1 Formulation of joint inference and retraining</h3> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf-480.webp 480w, /assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf-800.webp 800w, /assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="42-thief-scheduler">4.2 Thief Scheduler</h3> <ul> <li>问题太复杂了，解耦成 resource allocation (i.e., R and I )和 configuration selection (i.e., γ and λ)</li> </ul> <h2 id="6-evaluation">6 Evaluation</h2> <ul> <li>比较方案：重用 cached history models</li> </ul> <h2 id="8-related-work">8 Related Work</h2> <ul> <li>ML training systems</li> <li>Video processing systems <ul> <li>所有这些工作仅优化 DNN 推理的推理精度或系统/网络成本，这与 Ekya 专注于再训练不同</li> <li>LiveNAS[41]部署连续的再训练来更新视频升级模型，但重点关注有效地将客户端服务器带宽分配给单个视频流的不同子样本。相反，Ekya 专注于 GPU 分配，以最大限度地提高跨多个视频流的重新训练精度。</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[阅读笔记 - (NSDI'22) Ekya Continuous Learning of Video Analytics Models on Edge Compute Servers]]></summary></entry><entry><title type="html">阅读笔记 - (NSDI’23) RECL Responsive Resource-Efficient Continuous Learning for Video Analytics</title><link href="https://xlcbingo1999.github.io/blog/2023/NSDI23-RECL/" rel="alternate" type="text/html" title="阅读笔记 - (NSDI’23) RECL Responsive Resource-Efficient Continuous Learning for Video Analytics"/><published>2023-10-17T17:39:00+00:00</published><updated>2023-10-17T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/NSDI23-RECL</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/NSDI23-RECL/"><![CDATA[<h2 id="intro">Intro</h2> <ul> <li>目前面临的问题 <ul> <li>First, continuous retraining consumes the vast majority of compute resources in these video analytics systems (70%–90% in our study) [20, 21], making model retraining the key bottleneck in scaling video analytics to more video streams with limited compute resources. Our study (Fig. 2) shows that accuracy drops sharply (by 40% in object detection) as 4× more cameras share the GPU cycles to retrain their models (§2.2).</li> <li>Second, it takes time to retrain specialized DNNs, and abrupt video scene changes inevitably lead to drastic accuracy drops until the retraining is completed (see Fig. 3 for an example).</li> </ul> </li> <li>Motivation <ul> <li>重训练需要花费时间，因此可以<strong>重用</strong>过去数据训练的 DNN 来处理 【因为很多过去的数据具有时间空间上的一致性】</li> </ul> </li> <li>挑战 <ul> <li>第一，需要快速地找到特定的 DNN 可以满足需求 =&gt; 如何说明一个 DNN 是好的呢？</li> <li>第二，需要让重用模型的时间远低于重新训练模型 =&gt; 寻找重用模型的成本高于直接重新训练模型，因为会随着数据的增长，可以重用的模型就变多了</li> </ul> </li> <li>解决方案 <ul> <li>总论：针对资源受限场景中的视频分析持续学习场景，将模型重用考虑进来。</li> <li>贡献点 1：使用 MoE 方法作为模型选择器，允许 RECL 去基于视频分析任务和视频场景选择模型</li> <li>贡献点 2：RECL 为不同的边缘设备分享 model zoo，支持动态增加新的 expert</li> <li>贡献点 3：retraining jobs 之间共享 GPU 资源，设计一套调度算法去处理</li> </ul> </li> <li>效果 <ul> <li>Object detection mAP 的提升</li> <li>在获取相同 mAP 条件下，时间得到了缩短</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[阅读笔记 - (NSDI'23) RECL Responsive Resource-Efficient Continuous Learning for Video Analytics]]></summary></entry><entry><title type="html">数据库相关学习</title><link href="https://xlcbingo1999.github.io/blog/2023/Database/" rel="alternate" type="text/html" title="数据库相关学习"/><published>2023-10-03T17:39:00+00:00</published><updated>2023-10-03T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/Database</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/Database/"><![CDATA[<h2 id="基础概念">基础概念</h2> <h3 id="缓存穿透与布隆过滤器">缓存穿透与布隆过滤器</h3> <ul> <li> <p>缓存穿透</p> <ul> <li>查询一个<strong>一定不存在的数据</strong>，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</li> <li>在流量大时，可能 DB 就挂掉了，要是有人利用不存在的 key 频繁攻击我们的应用，这就是漏洞。</li> </ul> </li> <li> <p>解决方案：<strong>布隆过滤器</strong></p> <ul> <li>将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层数据库的查询压力。</li> </ul> </li> <li> <p>解决方案：短期空结果缓存</p> <ul> <li>如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</li> </ul> </li> </ul> <h3 id="缓存雪崩"><strong>缓存雪崩</strong></h3> <ul> <li> <p>缓存雪崩</p> <ul> <li>在设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，导致所有的查询都落在数据库上，造成了缓存雪崩。</li> </ul> </li> <li> <p>解决方案：加锁控制读数据库写缓存的数量</p> <ul> <li>通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</li> </ul> </li> <li> <p>解决方案：缓存 reload 机制</p> <ul> <li>预先去更新缓存，在即将发生大并发访问前手动触发加载缓存。</li> </ul> </li> <li> <p>解决方案：设置不同的过期时间</p> <ul> <li>不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</li> </ul> </li> <li> <p>解决方案：设置多级缓存</p> <ul> <li>做二级缓存，或者双缓存策略。A1 为原始缓存，A2 为拷贝缓存，A1 失效时，可以访问 A2，A1 缓存失效时间设置为短期，A2 设置为长期。</li> </ul> </li> </ul> <h3 id="缓存击穿"><strong>缓存击穿</strong></h3> <ul> <li> <p>缓存击穿</p> <ul> <li>对于一些设置了过期时间的 key，如果这些 key 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。缓存在某个时间点过期的时候，恰好在这个时间点对这个 Key 有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。</li> </ul> </li> <li> <p>解决方案：后台刷新</p> <ul> <li>后台定义一个 job(定时任务)专门主动更新缓存数据。比如,一个缓存中的数据过期时间是 30 分钟,那么 job 每隔 29 分钟定时刷新数据(将从数据库中查到的数据更新到缓存中)。</li> <li>这种方案比较容易理解，但会增加系统复杂度。比较适合那些 key 相对固定,cache 粒度较大的业务，key 比较分散的则不太适合，实现起来也比较复杂。</li> </ul> </li> <li> <p>解决方案：检查更新</p> <ul> <li>将缓存 key 的过期时间(绝对时间)一起保存到缓存中(可以拼接,可以添加新字段,可以采用单独的 key 保存..不管用什么方式,只要两者建立好关联关系就行).在每次执行 get 操作后,都将 get 出来的缓存过期时间与当前系统时间做一个对比,如果缓存过期时间-当前系统时间 &lt;=1 分钟(自定义的一个值),则主动更新缓存.这样就能保证缓存中的数据始终是最新的(和方案一一样,让数据不过期.)</li> <li>这种方案在特殊情况下也会有问题。假设缓存过期时间是 12:00，而 11:59 到 12:00 这 1 分钟时间里恰好没有 get 请求过来，又恰好请求都在 11:30 分的时 候高并发过来，那就悲剧了。这种情况比较极端，但并不是没有可能。因为“高 并发”也可能是阶段性在某个时间点爆发。</li> </ul> </li> <li> <p>解决方案：分级缓存</p> <ul> <li>采用 L1 (一级缓存)和 L2(二级缓存) 缓存方式，L1 缓存失效时间短，L2 缓存失效时间长。 请求优先从 L1 缓存获取数据，如果 L1 缓存未命中则加锁，只有 1 个线程获取到锁,这个线程再从数据库中读取数据并将数据再更新到到 L1 缓存和 L2 缓存中，而其他线程依旧从 L2 缓存获取数据并返回。</li> <li>这种方式，主要是通过避免缓存同时失效并结合锁机制实现。所以，当数据更 新时，只能淘汰 L1 缓存，不能同时将 L1 和 L2 中的缓存同时淘汰。L2 缓存中 可能会存在脏数据，需要业务能够容忍这种短时间的不一致。而且，这种方案 可能会造成额外的缓存空间浪费。</li> </ul> </li> </ul> <h2 id="redis">Redis</h2> <ul> <li>全集版参考文献：<a href="https://pdai.tech/md/db/nosql-redis/db-redis-overview.html">https://pdai.tech/md/db/nosql-redis/db-redis-overview.html</a></li> </ul> <h3 id="什么是-redis">什么是 Redis</h3> <p>Redis 是一款内存高速缓存数据库。Redis 全称为：<strong>Remote Dictionary Server（远程数据服务）</strong>，使用 C 语言编写，Redis 是一个<strong>key-value</strong><strong>存储系统（</strong><strong>键值存储</strong><strong>系统）</strong>，支持丰富的数据类型，如：String、list、set、zset、hash。</p> <h3 id="特点及使用场景">特点及使用场景</h3> <p><strong>读写性能优异</strong></p> <ul> <li>Redis 能读的速度是 110000 次/s,写的速度是 81000 次/s 。</li> <li>一般可以作为数据库的缓存来使用！【使用场景：热点数据的缓存】</li> </ul> <p><strong>数据类型</strong><strong>丰富</strong></p> <ul> <li>Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li> </ul> <p><strong>原子性</strong></p> <ul> <li>Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作全并后的原子性执行。</li> <li>高并发的秒杀活动、分布式序列号的生成等计数器任务，用于查询一个手机号发了多少短信等等【使用场景：计数器】</li> </ul> <p><strong>丰富的特性</strong></p> <ul> <li>Redis 支持 publish/subscribe, 通知, key 过期等特性。</li> </ul> <p><strong>持久化</strong></p> <ul> <li>Redis 支持 RDB, AOF 等持久化方式</li> </ul> <p><strong>发布/订阅</strong></p> <ul> <li>Redis 支持发布/订阅模式</li> <li>比如在订单生产后我们占用了库存，10 分钟后去检验用户是否真正购买，如果没有购买将该单据设置无效，同时还原库存。 由于 redis 自 2.8.0 之后版本提供 Keyspace Notifications 功能，允许客户订阅 Pub/Sub 频道，以便以某种方式接收影响 Redis 数据集的事件。 所以我们对于上面的需求就可以用以下解决方案，我们在订单生产时，设置一个 key，同时设置 10 分钟后过期， 我们在后台实现一个监听器，监听 key 的实效，监听到 key 失效时将后续逻辑加上。【使用场景：延时操作】</li> <li>之前 iOS 使用的 Redux 其中的一个部件应该就是基于发布/订阅的思想实现的。</li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-10-03-Database/Cs7BbbbKFoI733xlr80cX2o2nRb-480.webp 480w, /assets/img/2023-10-03-Database/Cs7BbbbKFoI733xlr80cX2o2nRb-800.webp 800w, /assets/img/2023-10-03-Database/Cs7BbbbKFoI733xlr80cX2o2nRb-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-10-03-Database/Cs7BbbbKFoI733xlr80cX2o2nRb.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p><strong>分布式</strong></p> <ul> <li>Redis Cluster</li> <li>这个主要利用 redis 的 setnx 命令进行，setnx：”set if not exists”就是如果不存在则成功设置缓存同时返回 1，否则返回 0 ，这个特性在很多后台中都有所运用，因为我们服务器是集群的，定时任务可能在两台机器上都会运行，所以在定时任务中首先 通过 setnx 设置一个 lock， 如果成功设置则执行，如果没有成功设置，则表明该定时任务已执行。 当然结合具体业务，我们可以给这个 lock 加一个过期时间，比如说 30 分钟执行一次的定时任务，那么这个过期时间设置为小于 30 分钟的一个时间就可以，这个与定时任务的周期以及定时任务执行消耗时间相关。【使用场景：分布式锁】</li> </ul> <h3 id="stream-数据结构">Stream 数据结构</h3> <ul> <li>作用：设计消息队列时使用！ <ul> <li>消息的生产</li> <li>消息的消费 <ul> <li>单播和多播（多对多）</li> <li>阻塞和非阻塞读取</li> </ul> </li> <li>消息有序性</li> <li>消息的持久化</li> </ul> </li> </ul> <h2 id="mysql">MySql</h2> <h3 id="mysql-安装教程">Mysql 安装教程</h3> <ul> <li>参考文档： <a href="https://developer.aliyun.com/article/758177">https://developer.aliyun.com/article/758177</a></li> </ul> <h3 id="mysql-创建用户">Mysql 创建用户</h3> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'username'</span><span class="o">@</span><span class="s1">'host'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">'password'</span><span class="p">;</span>


<span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'dog'</span><span class="o">@</span><span class="s1">'localhost'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">'123456'</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'pig'</span><span class="o">@</span><span class="s1">'192.168.1.101_'</span> <span class="n">IDENDIFIED</span> <span class="k">BY</span> <span class="s1">'123456'</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'pig'</span><span class="o">@</span><span class="s1">'%'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">'123456'</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'pig'</span><span class="o">@</span><span class="s1">'%'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">''</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="s1">'pig'</span><span class="o">@</span><span class="s1">'%'</span><span class="p">;</span>
</code></pre></div></div> <h3 id="mysql-修改用户的权限">Mysql 修改用户的权限</h3> <ul> <li>参考文献：<a href="https://www.cnblogs.com/baby123/p/12221405.html">https://www.cnblogs.com/baby123/p/12221405.html</a></li> </ul> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SHOW</span> <span class="n">VARIABLES</span> <span class="k">LIKE</span> <span class="s1">'validate_password%'</span><span class="p">;</span>

<span class="k">SET</span> <span class="k">GLOBAL</span> <span class="n">validate_password</span><span class="p">.</span><span class="n">policy</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</code></pre></div></div> <h3 id="mysql-设置支持远程登录">Mysql 设置支持远程登录</h3> <ul> <li>参考文献：<a href="https://www.qingsword.com/qing/1420.html">https://www.qingsword.com/qing/1420.html</a></li> </ul> <ol> <li>更改主配置文件，允许远程 IP 访问数据库</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/mysql/my.cnf
<span class="c"># 注释下面这一行</span>
<span class="c">#bind-address=127.0.0.1</span>

<span class="c"># 部分系统my.cnf文件中并没有bind-address，这些系统的主配置放在mysqld.cnf文件中</span>
<span class="nb">sudo </span>vim /etc/mysql/mysql.conf.d/mysqld.cnf
<span class="c">#bind-address=127.0.0.1</span>
</code></pre></div></div> <ol> <li>配置访问权限</li> </ol> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span> <span class="err">链接</span><span class="n">mysql</span><span class="err">数据库</span>
<span class="n">use</span> <span class="n">mysql</span><span class="p">;</span>
<span class="o">#</span> <span class="err">配置远程访问权限，</span><span class="n">qingsword</span><span class="err">是远程登陆使用的用户名，</span><span class="mi">123456</span><span class="err">是远程登陆使用的密码，</span><span class="o">%</span><span class="err">允许远程所有</span><span class="n">IP</span><span class="err">访问，如果需要指定</span><span class="n">IP</span><span class="err">，使用</span><span class="n">IP</span><span class="err">替换</span><span class="o">%</span>
<span class="k">grant</span> <span class="k">all</span> <span class="k">privileges</span> <span class="k">on</span> <span class="o">*</span><span class="p">.</span><span class="o">*</span> <span class="k">to</span> <span class="s1">'qingsword'</span><span class="o">@</span><span class="s1">'%'</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">'123456'</span> <span class="k">with</span> <span class="k">grant</span> <span class="k">option</span><span class="p">;</span>
<span class="o">#</span> <span class="err">使配置生效</span>
<span class="n">flush</span> <span class="k">privileges</span><span class="p">;</span>
<span class="o">#</span> <span class="err">查看</span><span class="n">mysql</span><span class="p">.</span><span class="k">user</span><span class="err">表，能看到我们添加进去的</span><span class="n">qingsword</span><span class="err">用户，</span><span class="k">host</span><span class="err">下面是允许访问的</span><span class="n">IP</span><span class="err">地址，</span><span class="o">%</span><span class="err">表示允许所有</span><span class="n">IP</span><span class="err">访问，由此可以看出，</span><span class="n">root</span><span class="err">用户只允许本地用户访问</span>
<span class="k">select</span> <span class="k">host</span><span class="p">,</span><span class="k">user</span> <span class="k">from</span> <span class="k">user</span><span class="p">;</span>
</code></pre></div></div> <ol> <li>防火墙设置</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看ufw防火墙启动状态, 如果没有激活，就不必要配置了</span>
<span class="nb">sudo </span>ufw status
<span class="c"># 在ufw中添加允许mysql的3306端口</span>
<span class="nb">sudo </span>ufw allow 3306/tcp
</code></pre></div></div> <ol> <li>远程访问命令</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 使用qingsword这个用户访问192.168.1.104这台主机的MySQL数据库</span>
mysql <span class="nt">-h</span> 192.168.1.104 <span class="nt">-u</span> qingsword <span class="nt">-p</span>
password: &lt;<span class="nt">--</span>输入我们授权时设置的那个密码
</code></pre></div></div> <ol> <li>删除远程访问</li> </ol> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use</span> <span class="n">mysql</span><span class="p">;</span>
<span class="k">delete</span> <span class="k">from</span> <span class="k">user</span> <span class="k">where</span> <span class="k">user</span><span class="o">=</span><span class="s1">'qingsword'</span><span class="p">;</span>
<span class="k">update</span> <span class="k">user</span> <span class="k">set</span> <span class="k">host</span><span class="o">=</span><span class="s1">'127.0.0.1'</span> <span class="k">where</span> <span class="k">host</span><span class="o">=</span><span class="s1">'%'</span> <span class="k">and</span> <span class="k">user</span><span class="o">=</span><span class="s1">'root'</span><span class="p">;</span>
<span class="n">flush</span> <span class="k">privileges</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="技术杂记"/><category term="技术杂记"/><summary type="html"><![CDATA[数据库相关学习]]></summary></entry><entry><title type="html">阅读笔记 - (NSDI’23) Transparent GPU Sharing in Container Clouds for Deep Learning Workloads</title><link href="https://xlcbingo1999.github.io/blog/2023/NSDI23-Transparent/" rel="alternate" type="text/html" title="阅读笔记 - (NSDI’23) Transparent GPU Sharing in Container Clouds for Deep Learning Workloads"/><published>2023-09-12T17:39:00+00:00</published><updated>2023-09-12T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/NSDI23-Transparent</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/NSDI23-Transparent/"><![CDATA[<h2 id="作者概述">作者概述</h2> <ul> <li>北大</li> <li>Johns Hopkins University</li> </ul> <h2 id="优点">优点</h2> <ul> <li>代码开源：</li> </ul> <h2 id="introduction">Introduction</h2> <ul> <li> <p>DNN Training Jobs 可以划分为两种类型</p> <ul> <li>Production job：有一些性能要求或者时间要求</li> <li>Opportunistic job：利用的是空闲的资源</li> </ul> </li> <li> <p>GPU Sharing 的现有解决工作</p> <ul> <li>AntMan：应用层 SOTA</li> <li>Nvidia Multiple Process Sharing（MPS）：OS 层解决方案，所有的任务都共用一个 cuda context，无法 提供 fault isolation。要求进程的总 GPU 内存需求要适配 GPU 内存容量，而且依赖应用程序去处理 GPU 内存和 host 内存之间的交换。</li> <li>NVIDIA Multi-Instance GPU (MIG)：OS 层解决方案，只能适配部分 GPU；只给了固定的 GPU Sharing 方案，只能将 GPU 划分为 7 等分，无法使用超过 4/7 的 GPU；当 GPU 上有任务执行的时候，无法再动态调整 GPU 的资源</li> </ul> </li> <li> <p>贡献</p> <ul> <li>满足了 Transparency【用户是不需要修改 DL 框架】、High GPU utilization【】、Performance isolation【主要是针对 Production Jobs 而言，不能因为 GPU Sharing 导致性能的下降】、Fault isolation【一个容器中的应用的 fault 不能 crash 其他容器的应用】</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[阅读笔记 - (NSDI'23) Transparent GPU Sharing in Container Clouds for Deep Learning Workloads]]></summary></entry><entry><title type="html">任务调度场景中的模拟器、源代码与数据集 Trace 汇总</title><link href="https://xlcbingo1999.github.io/blog/2023/Simulator-Code-Trace/" rel="alternate" type="text/html" title="任务调度场景中的模拟器、源代码与数据集 Trace 汇总"/><published>2023-08-10T17:39:00+00:00</published><updated>2023-08-10T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/Simulator-Code-Trace</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/Simulator-Code-Trace/"><![CDATA[<h2 id="开源代码集合">开源代码集合</h2> <ul> <li>这个知乎账号经常会分享很多源代码：<a href="https://www.zhihu.com/people/jwwthu">https://www.zhihu.com/people/jwwthu</a></li> </ul> <h2 id="模拟器源代码">模拟器、源代码</h2> <h3 id="cloudsim-系列">CloudSim 系列</h3> <ul> <li> <p>CloudSim 系列及其衍生</p> <ul> <li>CloudSimPy： <a href="https://github.com/FengcunLi/CloudSimPy">https://github.com/FengcunLi/CloudSimPy</a></li> <li>详细代码解析：<a href="https://we5lw6jk7r.feishu.cn/wiki/wikcnOiCCOD020L9N2VIc0S4CCc">CloudSimPy 模拟器</a></li> <li>DynamicCloudSim: Simulating heterogeneity in computational clouds[SigComm’19]</li> </ul> </li> <li> <p>基础模块：SimPy</p> </li> </ul> <h3 id="tiresias-开源模拟器">Tiresias 开源模拟器</h3> <ul> <li>Tiresias 开源的模拟器 <ul> <li><a href="https://github.com/SymbioticLab/Tiresias">https://github.com/SymbioticLab/Tiresias</a></li> <li>该模拟器的具体代码解析：<a href="https://we5lw6jk7r.feishu.cn/wiki/wikcnxb4Bz4fZ1i6SwYwtnaS5eI">Tiresias 模拟器</a></li> </ul> </li> </ul> <h3 id="decima-模拟器">Decima 模拟器</h3> <ul> <li>来源论文：<a href="https://we5lw6jk7r.feishu.cn/wiki/wikcnn5Pzyzx1DfPHDigE7NhKMb">[12.25]SIGCOMM’19@Learning scheduling algorithms for data processing clusters.pdf</a> <ul> <li>github 地址：<a href="https://github.com/hongzimao/decima-sim">https://github.com/hongzimao/decima-sim</a></li> <li>浙大的一个学生进行复现：</li> </ul> </li> <li>优点</li> <li>缺点 <ul> <li>不能使用 GPU。。。</li> </ul> </li> <li>基础模块</li> </ul> <h3 id="dl-模拟器">DL 模拟器</h3> <ul> <li> <p>来源论文：<a href="https://we5lw6jk7r.feishu.cn/wiki/wikcnisowy8bNvHxPGX1b4ldTYe">[12.10]TPDS’21@DL2_A_Deep_Learning-Driven_Scheduler_for_Deep_Learning_Clusters.pdf</a></p> <ul> <li>Python2.7 + Tensorflow 1.13-gpu</li> <li>包含 multiprocessing</li> <li>包含各种已有的调度算法</li> </ul> </li> <li> <p>详细代码解析：<a href="https://we5lw6jk7r.feishu.cn/wiki/wikcnLqM0S7GYhpBcVObjRhf3Fb">DL2 模拟器</a></p> </li> </ul> <h3 id="商汤科技自研模拟器">商汤科技自研模拟器</h3> <ul> <li>来源论文：<a href="https://we5lw6jk7r.feishu.cn/wiki/wikcnrLNTJSiKVYPYCmXxUZ4kPE">[2.4]A Simulation Platform for Multi-tenant Machine Learning Services on Thousands of GPUs.pdf</a></li> </ul> <h3 id="qore-dl-源代码">Qore-DL 源代码</h3> <ul> <li>github 地址：<a href="https://github.com/qore-dl/qore-dl-code">https://github.com/qore-dl/qore-dl-code</a></li> </ul> <h3 id="ekya">ekya</h3> <ul> <li>Github 地址：<a href="https://github.com/edge-video-services/ekya">https://github.com/edge-video-services/ekya</a></li> <li> <p>概述</p> <ul> <li>边缘段资源分配</li> <li>log 了很多信息，构建准确度和资源之间的函数关系?</li> <li>存在现成的模拟器可以使用</li> </ul> </li> </ul> <h3 id="dss-python-实现的离散调度模拟器">DSS Python 实现的离散调度模拟器</h3> <ul> <li>Github 地址：<a href="https://github.com/epfl-labos/DSS">https://github.com/epfl-labos/DSS</a></li> </ul> <h3 id="synergy-模拟器-正在阅读">Synergy 模拟器 [正在阅读]</h3> <ul> <li>Github 地址：<a href="https://github.com/msr-fiddle/synergy">https://github.com/msr-fiddle/synergy</a></li> <li>中文的介绍文档：<a href="https://hliangzhao.cn/articles/000001660896665118db6926f214a2cab4f42f1ebdd563f000">https://hliangzhao.cn/articles/000001660896665118db6926f214a2cab4f42f1ebdd563f000</a>#</li> <li>根据文章的结论，使用文章提供的模拟器得到的结论与真实的 Trace 差距小于 5%，确认了模拟器的保真性。</li> <li>模拟器代码阅读：<a href="https://we5lw6jk7r.feishu.cn/wiki/V9eAw3AiDiitnFkuKtMcn9WJnhc">Synergy 模拟器</a></li> </ul> <h3 id="dl_cluster_simulator">DL_cluster_simulator</h3> <ul> <li>地址: <a href="https://github.com/nexuslrf/DL_cluster_simulator">https://github.com/nexuslrf/DL_cluster_simulator</a></li> <li>优点 <ul> <li>有很漂亮的监控界面</li> </ul> </li> <li> <p>缺点</p> <ul> <li>数据文件都不给</li> <li>暂时搁置，等作者回复后检查是否可以把监控界面拿过来用</li> </ul> </li> <li>基础模块</li> </ul> <h3 id="yafs">YAFS</h3> <ul> <li>fog 节点的调度器的</li> <li> <p>优点</p> <ul> <li>有非常多现成的例子，可以直接使用</li> <li>因为是 Fog 节点，因此包含大量的拓扑结构，使用 NetworkX 可以直接快速构建一个图拓扑结构</li> <li>官方文档【目前看来非常齐全】：<a href="https://yafs.readthedocs.io/en/latest/index.html">https://yafs.readthedocs.io/en/latest/index.html</a></li> <li>发了论文：</li> </ul> </li> <li>基础模块</li> </ul> <h3 id="privacy-budget-scheduling">Privacy Budget Scheduling</h3> <ul> <li>阅读地址：<a href="https://www.usenix.org/conference/osdi21/presentation/luo">Privacy Budget Scheduling</a></li> <li>模拟器/源码地址：<a href="https://github.com/columbia/PrivateKube">https://github.com/columbia/PrivateKube</a></li> <li>中文导读：<a href="https://zhuanlan.zhihu.com/p/479524282">https://zhuanlan.zhihu.com/p/479524282</a></li> <li>优点：</li> <li> <p>基础模块：</p> <ul> <li>desmod（一个用于离散事件处理的模拟器组成模块，docs：<a href="https://desmod.readthedocs.io/en/latest/index.html">https://desmod.readthedocs.io/en/latest/index.html</a>）</li> </ul> </li> <li> <p>流程全整理【确认模拟器的流程】</p> <ul> <li>如何获取数据？</li> <li>数据集从哪里来？</li> <li>如何执行数据层面的 DP 调度？</li> <li>如何执行 GPU 层面的调度？</li> <li>可否整合到 Gavel 中？</li> </ul> </li> </ul> <h3 id="gavel-很好">Gavel [很好]</h3> <ul> <li>模拟器/源码地址：<a href="https://github.com/stanford-futuredata/gavel">https://github.com/stanford-futuredata/gavel</a></li> <li> <p>优点：</p> <ul> <li>提供了一个调度上的通用最优化问题；</li> <li>使用时间片轮转调度机制，决策变量是 X，然后根据最优化目标的不同，确定一个最优化问题；</li> <li>提供了 Space Sharing 和 Placement Sensitivity 的模拟；</li> <li>提供了性能指标相关数据，为后续研究给予了更多的自信。</li> </ul> </li> <li> <p>缺点：</p> <ul> <li>目前看来主要还是针对轮转作业进行优化；</li> <li>代码中存在一些小 Bug，而且 GPU 种类写死，不太方便进行定制。</li> </ul> </li> <li> <p>流程全整理</p> <ul> <li>Total step 确定？【默认是随机生成的，然后会和 Throughput 的已有数据进行乘操作】</li> <li>算法得到 Allocation 后，还会根据当前实际的任务在 worker 上的处理时间，动态调整得到的结果，最后变成一个_priority 用于队列计算。可能有时候还会遇到_priority 相同的情况，则还会根据_depolit【即衡量目标分配和实际分配的差距，多减少增】去进行划分</li> <li>算法在任务到来和任务结束的时候才会更新 allocation，减少对算法求解器的使用</li> <li>带上 Pref 表示使用数据集中提供的 throughout 【OK】</li> <li>Pack 算法的异同点 <ul> <li>Pack：任务提交【OK】</li> <li>Pack：选中 packing 任务的调度处理方式【OK，没看到什么复杂的，正常处理】</li> <li>Pack：任务单步完成如何结算，任务整体完成如何结算【OK，没看到什么复杂的，正常处理】</li> <li>Pack 算法的计算方式：</li> </ul> </li> <li>接入 philly_job_distribution 后的异同点 <ul> <li>其实就是改变了 scale_factor，使得任务可以获得很大的 scale_factor（即使用多 multi_gpu），在代码中好像就是直接在任务生成的时候就模拟好 philly_job_distribution 的情况，而不是直接从 philly 数据集中获取</li> <li>multi_gpu：任务提交【OK，会在 load throughputs 的时候根据任务的 scale_factor 去获取不同的 throughputs 以用来计算 step】</li> <li>multi_gpu：任务单步完成/整体完成如何结算：多个相同的 GPU 会平均分配单轮的 step 结果，直接考虑使用即可</li> </ul> </li> <li>如何获取 GPU 上的性能数据 <ul> <li>学习并了解 measure_throughput.py 可以获得具体的方法</li> </ul> </li> <li>Water_filling 算法的异同点 <ul> <li>目前没看出来…</li> </ul> </li> <li>SLO 算法的异同点 <ul> <li>其实就是增加了几种云服务厂商给的资源价格，但是没有完整数据，需要自己去收集</li> <li><a href="https://github.com/search?q=p3.2xlarge&amp;type=Code">https://github.com/search?q=p3.2xlarge&amp;type=Code</a> 进行一波搜索可以找到很多 AWS 的定价数据，这块内容还是比较全面的。直接接入使用即可。最后接入的数据集是：<a href="https://github.com/LucianaMarques/amazon-spot-dataset">https://github.com/LucianaMarques/amazon-spot-dataset</a></li> <li>应该使用 scripts/drivers/simulate_scheduler_with_generated_jobs.py 去测试</li> </ul> </li> <li>Allox 算法与实现 <ul> <li>使用匈牙利算法进行计算：<a href="https://www.hungarianalgorithm.com/examplehungarianalgorithm.php">https://www.hungarianalgorithm.com/examplehungarianalgorithm.php</a></li> <li>无法注入多 GPU 任务</li> </ul> </li> <li>FIFO 系列算法的实现方法 <ul> <li>这个算法其实很简单，就是一个队列按顺序调度即可</li> <li>Base: 非抢占式 FIFO；Perf 和 Packed: 抢占式 FIFO, 每个时刻都重新计算 FIFO 的方式</li> </ul> </li> <li>FinishedTimeFairness 系列算法的实现方法（Themis）</li> </ul> </li> <li> <p>如何画图</p> <ul> <li><code class="language-plaintext highlighter-rouge">scheduler/notebooks/figures/evaluation/continuous_jobs.ipynb</code> contains code to parse the resulting logs and produce graphs (can be run using <code class="language-plaintext highlighter-rouge">jupyter notebook</code>). The notebook should use the appropriate <code class="language-plaintext highlighter-rouge">log_directory</code> used in the above command line.</li> </ul> </li> <li> <p>From_trace：</p> <ul> <li>这个参数一般是可以从 checkpoint 中读取数据，该实验的过程总是非常长，我觉得非常合理。同时，也可以跟随着之前的环境进行进一步的测试。</li> <li>可以从 checkpoint 做恢复进行 debug</li> </ul> </li> <li> <p>如何接入价格和 Elastic</p> <ul> <li>可以接入 aws 的价格数据，aws 的 plot prices 是开源的，可以直接拿来用。</li> <li>每个时刻都会根据价格曲线，从多个数据中心中找最便宜的价格使用即可</li> </ul> </li> <li> <p>如何更换一个新算法</p> <ul> <li>如果想要接入那些不需要考虑公平性和时间轮转的算法，只需要控制队列即可</li> </ul> </li> </ul> <h3 id="pop">POP</h3> <ul> <li>模拟器：<a href="https://github.com/stanford-futuredata/POP">https://github.com/stanford-futuredata/POP</a> <ul> <li>本质上就是在 Gavel 的基础上，加了一个对大矩阵的分切算法，并提供了算法保证。</li> <li>集成更多内容：<a href="https://github.com/stanford-futuredata/pop-ncflow">https://github.com/stanford-futuredata/pop-ncflow</a></li> </ul> </li> </ul> <h3 id="willump">Willump</h3> <ul> <li>模拟器：<a href="https://github.com/stanford-futuredata/Willump-Simple">https://github.com/stanford-futuredata/Willump-Simple</a></li> <li>目前看来好像是推断任务的调度加速</li> </ul> <h3 id="parallelsched-停止阅读">ParallelSched [停止阅读]</h3> <ul> <li> <p>浙大的学生实现的一个调度器模拟器</p> <ul> <li>代码：<a href="https://github.com/hliangzhao/ParallelSched">https://github.com/hliangzhao/ParallelSched</a></li> <li>集成内容：阿里数据集、DL2、Optimus、Tetris、SRTF、DRF、exp_DRF</li> </ul> </li> <li> <p>考虑集成 Optimus、Tetris、DL2 进入 Gavel 中</p> </li> </ul> <h3 id="resalloc-停止阅读">Resalloc [停止阅读]</h3> <ul> <li>POP/ Gavel 作者搞出来的利用优化问题解决调度问题的模拟器：<a href="https://github.com/cvxgrp/resalloc">https://github.com/cvxgrp/resalloc</a></li> <li>论文：<a href="https://web.stanford.edu/~boyd/papers/resource_alloc.html">https://web.stanford.edu/~boyd/papers/resource_alloc.html</a></li> <li>和我们想要的场景不太一致…</li> </ul> <h3 id="titansched---chronusartifact">TitanSched &amp; ChronusArtifact</h3> <ul> <li>TitanSched[正在开发中]：<a href="https://github.com/gaow0007/TitanSched">https://github.com/gaow0007/TitanSched</a></li> <li> <p>ChronusArtifact[代码没法跑..]：<a href="https://github.com/S-Lab-System-Group/ChronusArtifact">https://github.com/S-Lab-System-Group/ChronusArtifact</a></p> <ul> <li>系统架构图：</li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2022-06-06-Simulator-Code-Trace/JTW4bDgWJo7WTkxTM0ocoX2ZnVh-480.webp 480w, /assets/img/2022-06-06-Simulator-Code-Trace/JTW4bDgWJo7WTkxTM0ocoX2ZnVh-800.webp 800w, /assets/img/2022-06-06-Simulator-Code-Trace/JTW4bDgWJo7WTkxTM0ocoX2ZnVh-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2022-06-06-Simulator-Code-Trace/JTW4bDgWJo7WTkxTM0ocoX2ZnVh.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>Astraea[目前看起来比较适合我来做]：<a href="https://github.com/yzs981130/Astraea_Artifacts">https://github.com/yzs981130/Astraea_Artifacts</a> <ul> <li>这篇工作的代码是可以跑出来的，而且看起来没有什么大的 bug</li> <li>具体的方法和后续作者的源码修改：TitanSched</li> </ul> </li> </ul> <h3 id="ones-模拟器">Ones 模拟器</h3> <ul> <li>模拟器代码：<a href="https://github.com/kurisusnowdeng/ones_sc21">https://github.com/kurisusnowdeng/ones_sc21</a></li> <li>注意：该模拟器是包含任务 epoch 和 acc 的对应关系。</li> </ul> <h3 id="强化学习模拟器-停止阅读">强化学习模拟器 [停止阅读]</h3> <ul> <li>一个专门用于模拟强化学习调度算法的模拟器：<a href="https://github.com/mail-ecnu/VMAgent">https://github.com/mail-ecnu/VMAgent</a></li> <li> <p>问题</p> <ul> <li>这个模拟器比较老，很多文档写的比较一般</li> <li>连实例代码都很难跑起来，感觉这份代码还是有比较大的问题的！</li> </ul> </li> <li>状态：暂时搁置</li> </ul> <h3 id="deepboot-模拟器-正在阅读">DeepBoot 模拟器 [正在阅读]</h3> <ul> <li>来自文章 [TPDS’23] DeepBoot: Dynamic Scheduling System for Training and Inference Deep Learning Tasks in GPU Cluster</li> <li><a href="https://github.com/czq693497091/DeepBoot">https://github.com/czq693497091/DeepBoot</a></li> <li> <p>优点</p> <ul> <li>这个代码很简单就能跑起来</li> <li>似乎没看到什么大的问题，有点想从里面找一些点来做！</li> <li>适合用来学习以下代码的实现 <ul> <li>Pollux (OSDI’21)</li> <li>AFS (NSDI’21)</li> <li>Tiresias (NSDI’19)</li> <li>Optimus (EuroSys’18)</li> <li>Ayrl (Lyra, EuroSys’23)</li> </ul> </li> </ul> </li> <li>问题</li> </ul> <h3 id="hydra-模拟器-未读">hydra 模拟器 [未读]</h3> <ul> <li>来自文章：<a href="https://we5lw6jk7r.feishu.cn/wiki/OsfrwWf58il1Guk77ODcQu7Xn2b">阅读笔记 - (TC’23) Hydra: Deadline-Aware and Efficiency-Oriented Scheduling for Deep Learning Jobs on Heterogeneous GPUs</a></li> <li>github：<a href="https://github.com/dos-lab/Hydra">https://github.com/dos-lab/Hydra</a></li> <li> <p>优点</p> <ul> <li>这份代码写的很不错！纯 GO 语言，适合当 Go 语言的学习</li> <li>似乎没看到什么大的问题，有点想从里面找一些点来做！</li> <li>适合用来学习以下代码的实现 <ul> <li>Allox</li> <li>Gavel</li> <li>Chronus</li> </ul> </li> </ul> </li> <li>问题</li> </ul> <h3 id="beware-of-fragmentation-模拟器-正在阅读">Beware of Fragmentation 模拟器 [正在阅读]</h3> <ul> <li>来自论文：<a href="https://we5lw6jk7r.feishu.cn/wiki/G8GtwdbAui85kDkVfLTckrBhnFj">阅读笔记 - (ATC’23)Beware of Fragmentation: Scheduling GPU-Sharing Workloads with Fragmentation Gradient Descent</a></li> <li>github：<a href="https://github.com/hkust-adsl/kubernetes-scheduler-simulator">https://github.com/hkust-adsl/kubernetes-scheduler-simulator</a></li> <li>K8S 调度器、Client-go 和 controller 的源码解读：<a href="https://github.com/jindezgm/k8s-src-analysis/tree/master">https://github.com/jindezgm/k8s-src-analysis/tree/master</a></li> <li>自定义 K8S 调度插件：<a href="https://www.qikqiak.com/post/custom-kube-scheduler/">https://www.qikqiak.com/post/custom-kube-scheduler/</a></li> <li>K8S 调度器性能测试代码：<a href="https://github.com/nexuslrf/cl2-scheduler-throughput/tree/master">https://github.com/nexuslrf/cl2-scheduler-throughput/tree/master</a></li> <li>经典的 K8S 调度流程：<a href="https://we5lw6jk7r.feishu.cn/wiki/JXJfwb362ivNz7kMeF5cKneenad">Beware of Fragmentation 模拟器</a></li> <li> <p>源码简单阅读：<a href="https://we5lw6jk7r.feishu.cn/wiki/JXJfwb362ivNz7kMeF5cKneenad">Beware of Fragmentation 模拟器</a></p> <ul> <li>整个流程完整地调用了 K8S 中的很多调度接口，对了解和学习 K8S 中的调度接口设计是非常有帮助的！</li> <li>代码里给出的较大规模测试是可以执行的！【但是缩小规模后容易出错，需要仔细看一下】</li> <li>Data =&gt; 比较简单的数据，直接阅读即可理解</li> <li>generate_config_and_run.py <ul> <li>执行逻辑：全部都是使用二进制文件 ./bin/simon 来执行的</li> <li>-gpusel： 这个参数让人疑惑，如果选择了一般的 GPU，执行时间如何获得呢？</li> <li>Gpu sharing 的场景如何进行模拟？</li> </ul> </li> <li>不同的调度算法的区别体现在 yaml 中的，通过更改 <code class="language-plaintext highlighter-rouge">-f</code> 和 <code class="language-plaintext highlighter-rouge">--default-scheduler-config</code> 的配置文件达成</li> <li> <p>核心的调度代码如下 [没有看懂这段代码在.CoreV1().Pods().Get() 执行了何种操作，瞬间就完成了调度逻辑，需要在调试的时候切入一下]</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">sim</span> <span class="o">*</span><span class="n">Simulator</span><span class="p">)</span> <span class="n">createPod</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">corev1</span><span class="o">.</span><span class="n">Pod</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sim</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">CoreV1</span><span class="p">()</span><span class="o">.</span><span class="n">Pods</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">Namespace</span><span class="p">)</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">sim</span><span class="o">.</span><span class="n">ctx</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">metav1</span><span class="o">.</span><span class="n">CreateOptions</span><span class="p">{});</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"%s(%s): %s"</span><span class="p">,</span> <span class="n">simontype</span><span class="o">.</span><span class="n">CreatePodError</span><span class="p">,</span> <span class="n">utils</span><span class="o">.</span><span class="n">GeneratePodKey</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span>
    <span class="p">}</span>


    <span class="c">// synchronization</span>
    <span class="n">sim</span><span class="o">.</span><span class="n">syncPodCreate</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">Namespace</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span> <span class="m">2</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Millisecond</span><span class="p">)</span>
    <span class="n">pod</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">sim</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">CoreV1</span><span class="p">()</span><span class="o">.</span><span class="n">Pods</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">Namespace</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">sim</span><span class="o">.</span><span class="n">ctx</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">metav1</span><span class="o">.</span><span class="n">GetOptions</span><span class="p">{})</span>
    <span class="k">if</span> <span class="n">pod</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">pod</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">NodeName</span> <span class="o">!=</span> <span class="s">""</span> <span class="p">{</span>
                    <span class="n">sim</span><span class="o">.</span><span class="n">syncNodeUpdateOnPodCreate</span><span class="p">(</span><span class="n">pod</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">NodeName</span><span class="p">,</span> <span class="n">pod</span><span class="p">,</span> <span class="m">2</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Millisecond</span><span class="p">)</span>
                    <span class="n">log</span><span class="o">.</span><span class="n">Infof</span><span class="p">(</span><span class="s">"pod(%s) is scheduled to node(%s)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">utils</span><span class="o">.</span><span class="n">GeneratePodKey</span><span class="p">(</span><span class="n">pod</span><span class="p">),</span> <span class="n">pod</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">NodeName</span><span class="p">)</span>
            <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"[createPod] pod(%s) not created, should not happen"</span><span class="p">,</span> <span class="n">utils</span><span class="o">.</span><span class="n">GeneratePodKey</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div> </div> </li> </ul> </li> </ul> <h3 id="rotary模拟器testbed-未读">Rotary模拟器+testbed [未读]</h3> <ul> <li> <p>github：<a href="https://github.com/csruiliu/rotary-dlt/tree/main">https://github.com/csruiliu/rotary-dlt/tree/main</a></p> </li> <li> <p>论文导读：<a href="https://we5lw6jk7r.feishu.cn/wiki/XxE4w7hEFi2mQ2kOVVscR4xrn4b">阅读笔记 - (ICDE’23) Rotary: A Resource Arbitration Framework for Progressive Iterative Analytics</a></p> </li> </ul> <h3 id="infadapter-testbed-未读">InfAdapter testbed [未读]</h3> <ul> <li> <p>github：<a href="https://github.com/reconfigurable-ml-pipeline/InfAdapter">https://github.com/reconfigurable-ml-pipeline/InfAdapter</a></p> </li> <li> <p>论文导读：</p> </li> <li> <p>使用K8S集群+TF Serving</p> </li> </ul> <h3 id="jellyfish-testbed-正在阅读">Jellyfish testbed [正在阅读]</h3> <ul> <li>Github： <a href="https://github.com/vuhpdc/jellyfish">https://github.com/vuhpdc/jellyfish</a></li> <li>论文导读：</li> <li>代码详细分析：</li> </ul> <h3 id="vessim-未读-碳排放模拟器">Vessim [未读] 碳排放模拟器</h3> <ul> <li> <p>Github：<a href="https://github.com/dos-group/vessim">https://github.com/dos-group/vessim</a></p> </li> <li></li> </ul> <h2 id="trace-整合">Trace 整合</h2> <h3 id="ms-philly-cluster数据集">MS Philly Cluster数据集</h3> <ul> <li>Microsoft提出的一个模拟器 <ul> <li>需要git lfs下载：<a href="https://zhuanlan.zhihu.com/p/146683392">https://zhuanlan.zhihu.com/p/146683392</a></li> <li>地址：<a href="https://github.com/msr-fiddle/philly-traces">https://github.com/msr-fiddle/philly-traces</a></li> </ul> </li> <li>数据集中为什么会出现那种一分钟结束的任务？ <ul> <li>在Tiresias文章的附录中，讲到因为用户的配置导致的bug，使得这个任务被快速地结束了。</li> </ul> </li> <li>可能有点作用的分析结果 <ul> <li>来自Tiresias文章的附录</li> </ul> </li> </ul> <h3 id="google数据集">Google数据集</h3> <ul> <li>Google Cluster Traces <ul> <li><a href="https://github.com/google/cluster-data">https://github.com/google/cluster-data</a></li> </ul> </li> </ul> <h3 id="阿里数据集">阿里数据集</h3> <ul> <li><a href="https://github.com/alibaba/clusterdata">https://github.com/alibaba/clusterdata</a></li> <li><em>cluster-trace-v2017</em></li> <li><em>cluster-trace-v2018</em></li> <li><em>cluster-trace-gpu-v2020</em></li> <li><em>cluster-trace-microservices-v2021</em></li> <li><em>cluster-trace-microarchitecture-v2022</em></li> <li><em>cluster-trace-gpu-v2023</em> <ul> <li>来自论文：<a href="https://we5lw6jk7r.feishu.cn/wiki/G8GtwdbAui85kDkVfLTckrBhnFj">阅读笔记 - (ATC’23)Beware of Fragmentation: Scheduling GPU-Sharing Workloads with Fragmentation Gradient Descent</a></li> </ul> </li> </ul> <h3 id="商汤数据集">商汤数据集</h3> <ul> <li>HeliosData <ul> <li><a href="https://github.com/S-Lab-System-Group/HeliosData">https://github.com/S-Lab-System-Group/HeliosData</a></li> </ul> </li> </ul> <h3 id="planetlab-workload-traces数据集">planetlab-workload-traces数据集</h3> <ul> <li>planetlab-workload-traces <ul> <li><a href="https://github.com/beloglazov/planetlab-workload-traces">https://github.com/beloglazov/planetlab-workload-traces</a></li> </ul> </li> </ul> <h3 id="pollux论文的一些实验数据">pollux论文的一些实验数据</h3> <ul> <li>Pollux: Co-adaptive Cluster Scheduling for Goodput-Optimized Deep Learning 提供的部分开源数据集 <ul> <li>只有在他们的testbed实验系统上跑的，用于绘图的数据集</li> <li>特点： <ul> <li>数据集很小</li> <li>都是从实际系统上采样得到结果，主要是通过nvidia-smi获得的硬件在每个时刻的使用情况</li> <li>其结果用于绘制下面的几张图</li> </ul> </li> <li>地址：<a href="https://github.com/petuum/pollux-results">https://github.com/petuum/pollux-results</a></li> </ul> </li> </ul> <h3 id="azure-trace数据集">Azure Trace数据集</h3> <ul> <li> <p><a href="https://github.com/Azure/AzurePublicDataset">https://github.com/Azure/AzurePublicDataset</a></p> </li> <li>特点： <ul> <li>不针对深度学习任务</li> <li>主要是追踪Azure的VM情况</li> </ul> </li> <li>被引用 <ul> <li><a href="https://we5lw6jk7r.feishu.cn/file/boxcnZjVUcgmtWybMjmJKowyntc">[12.20]SOSP’21@Generating Complex, Realistic Cloud Workloads using Recurrent Neural Networks.pdf</a></li> </ul> </li> </ul> <h2 id="任务workload性能建模">任务Workload性能建模</h2> <ul> <li>一篇性能建模的blog（未更新完全）：<a href="https://zhuanlan.zhihu.com/p/548465440">https://zhuanlan.zhihu.com/p/548465440</a></li> </ul> <h3 id="mlpref">MLPref</h3> <ul> <li>介绍文献：<a href="https://juejin.cn/post/7115232074323197960">https://juejin.cn/post/7115232074323197960</a></li> </ul> <h3 id="torchprofiler">torch.profiler</h3> <ul> <li> <p>Pytorch原生提供的一个profiler工具：<a href="https://pytorch.org/tutorials/recipes/recipes/profiler_recipe.html">https://pytorch.org/tutorials/recipes/recipes/profiler_recipe.html</a></p> </li> <li> <p>一篇介绍的blog：<a href="https://zhuanlan.zhihu.com/p/403957917">https://zhuanlan.zhihu.com/p/403957917</a></p> </li> </ul> <h3 id="rotary">Rotary</h3> <ul> <li>源码提供了一个profiler工具的新写法：<a href="https://github.com/csruiliu/rotary-dlt/tree/main">https://github.com/csruiliu/rotary-dlt/tree/main</a></li> </ul>]]></content><author><name></name></author><category term="开源资源汇总文档"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[任务调度场景中的模拟器、源代码与数据集 Trace 汇总]]></summary></entry><entry><title type="html">博弈论</title><link href="https://xlcbingo1999.github.io/blog/2023/Game-Theory/" rel="alternate" type="text/html" title="博弈论"/><published>2023-08-10T17:39:00+00:00</published><updated>2023-08-10T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/Game-Theory</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/Game-Theory/"><![CDATA[<h2 id="基础概念">基础概念</h2> <p>Game theory翻译过来就是博弈论，其实是研究多个玩家在互相交互中取胜的方法。例如在耶鲁大学的博弈论公开课中，有一个游戏是让全班同学从0到100中选一个数，其中如果选择的数最接近所有数的平均值的三分之一则这个玩家获胜。首先大家应该不会选择比33大的数，因为其他人都选择100也不能赢不了，那么如果大家都选择比33小，自己就应该选择比11小的数，考虑到其他人也是这样想的，那么自己应该选择比11小很多的数，如果我知道别人也知道自己选择比11小很多的数的话，那应该选择更小的数。那么这个游戏的理想值是0，也就是纳什均衡点，就是当对方也是深晦游戏规则并且知道你也很懂游戏规则时做出的最优决定，当然第一次游戏大家都不是完美的决策者（或者不知道对方是不是完美的决策者），因此不一定会选择纳什均衡点，但多次游戏后结果就是最终取胜的就是非常接近0的选择。</p> <h2 id="纳什均衡点">纳什均衡点</h2> <p>所有人已经选择了对自己而言的最优解并且自己单方面做其他选择也无法再提高的点。也就是说，如果玩家都是高手，能达到或者逼近纳什均衡的策略就是最优策略，如果对手不是高手不会选择最优策略，那么纳什均衡点不一定保证每局都赢，但长远来看极大概率会赢这样的新手。</p> <h2 id="combinatorial-game">Combinatorial Game</h2> <ul> <li>满足以下环境条件可以称为Combinatorial Game <ul> <li>Zero-sum</li> <li>Perfect information</li> <li>Deterministic</li> <li>Discrete</li> <li>Sequential</li> </ul> </li> </ul> <h2 id="minmax策略">Minmax策略</h2> <ul> <li>目标是找到逼近纳什均衡的搜索策略</li> <li>从树的叶子结点开始看，如果是本方回合就选择max的，如果是对方回合就是min的，实际上这也是假设对方是聪明的也会使用minmax算法，这样在博弈论里面就达到一个纳什均衡点。</li> </ul> <h2 id="蒙特卡洛树搜索">蒙特卡洛树搜索</h2> <ul> <li>论文：A Survey of Monte Carlo Tree Search Methods http://pubs.doc.ic.ac.uk/survey-mcts-methods/survey-mcts-methods.pdf</li> <li>可以参考的源码：MCTS的完整实现代码在 tobegit3hub/ml_implementation</li> <li>基于树结构，权衡探索和利用，在搜索空间巨大的时候仍有效的搜索算法。目标是找到逼近纳什均衡的搜索策略。</li> <li>探索和利用策略： <ul> <li>得分不仅是由这个子节点最终赢的概率来，而且与这个子节点玩的次数成负相关，也就是说这个子节点如果平均得分高就约有可能选中（因为认为它比其他节点更值得利用），同时如果子节点选中次数较多则下次不太会选中（因为其他节点选择次数少更值得探索），因此MCTS根据配置探索和利用不同的权重，可以实现比随机或者其他策略更有启发式的方法。</li> <li>UCT（Upper Confidence bounds for Trees）使用的UCB算法：\(argmax_{v' \in Child(v)} \frac{Q(v')}{N(v')} + c \sqrt{\frac{2 \ln{N(v)}}{N(v')}}\)，其中v’表示当前树节点，v表示父节点，Q表示这个树节点的累计quality值，N表示这个树节点的visit次数，C是一个常量参数（可以控制exploitation和exploration权重）。这个公式的意思时，对每一个节点求一个值用于后面的选择，这个值有两部分组成，左边是这个节点的平均收益值（越高表示这个节点期望收益好，越值得选择，用于exploitation），右边的变量是这个父节点的总访问次数除以子节点的访问次数（如果子节点访问次数越少则值越大，越值得选择，用户exploration），因此使用这个公式是可以兼顾探索和利用的。c常量我们可以使用\(1/\sqrt{2}\)，这是Kocsis、Szepesvari提出的经验值</li> </ul> </li> <li>必要假设 <ul> <li>（博弈论领域假设）Zero-sum：零和博弈，所有玩家的收益之和为0，一定能分出输赢。</li> <li>（博弈论领域假设）Perfect information / Fully information：对称信息（完全信息）。 游戏的所有信息和状态都是所有玩家可以观察到的，因此双方的游戏策略只需要关注共同的状态即可。不能像打牌一样隐藏自己的手牌</li> <li>（博弈论领域假设）Determinism：确定性策略，每一个操作都没有随机因素</li> <li>（博弈论领域假设）Sequential：顺序执行，所有的操作都是顺序执行的</li> <li>（博弈论领域假设）Discrete：离散动作，没有一个动作是连续值</li> <li>（优化领域假设）Black box optimization：黑盒优化，类似多臂老虎机，不能通过求导或者凸优化方法找到最优解，否则使用MCTS也是没有意义。【机器学习就是典型的优化过程，但我们用的机器学习算法如LR、SVM、DNN都不是黑盒，而是根据数学公式推导通过对函数求导等方式进行的优化。如果我们能把问题描述成一个函数或者凸优化问题，那么我们通过数学上的求导就可以找到最优解，这类问题并不需要用到MCTS等搜索算法，但实际上很多问题例如围棋就无法找到一个描述输赢的函数曲线，这样就无法通过纯数学的方法解决。】【这类问题统称为黑盒优化问题，我们不能假设知道这个场景内部的函数或者模型结构，只能通过给定模型输入得到模型输出结果来优化。例如多臂老虎机（Multi-arm Bandit）问题，我们有多台老虎机可以投币，但不知道每一台输赢的概率，只能通过多次投币来测试，根据观察的结果预估每台机器的收益分布，最终选择认为收益最大的，这种方法一般会比随机方法效果好。】【黑盒优化的算法也有很多，例如进化算法、贝叶斯优化、MCTS也算是，而这些算法都需要解决如何权衡探索和利用（Exploration and Exploitation）的问题。】</li> </ul> </li> <li>流程：通过不断的模拟得到大部分节点的UCB值，然后下次模拟的时候根据UCB值有策略得选择值得利用和值得探索的节点继续模拟，在搜索空间巨大并且计算能力有限的情况下，这种启发式搜索能更集中地、更大概率找到一些更好的节点。 <ul> <li>Selection：在树中找到一个最好的值得探索的节点，一般策略是先选择未被探索的子节点，如果都探索过就选择UCB值最大的子节点。</li> <li>Expansion：在前面选中的子节点中走一步创建一个新的子节点，一般策略是随机执行一个操作并且这个操作不能与前面的子节点重复。</li> <li>Simulation：在前面新Expansion出来的节点开始模拟游戏，直到到达游戏结束状态，这样可以收到到这个expansion出来的节点的得分是多少。</li> <li>Backpropagation：把前面expansion出来的节点得分反馈到前面所有父节点中，更新这些节点的quality value和visit times，方便后面计算UCB值。</li> <li>源代码：其中TREE_POLICY就是实现了Selection和和Expansion两个阶段，DEFAULT_POLICY实现了Simulation阶段，BACKUP实现了Backpropagation阶段。</li> </ul> </li> <li>AlphaGo算法对MCTS算法的优化 <ul> <li>利用policy network的输出替换UCB的父节点访问次数，同样使用子节点访问次数作为分母保证exploration</li> <li>Q值改为快速走子网络得到的所有叶子节点的均值，神经网络改成ResNet</li> <li>首先，AlphaGo每个节点可选action太多了，selection阶段不能像前面先遍历完所有子节点再expansion，这里是用改进的UCB算法来找到最优的需要expansion子节点，算法基本类似也是有控制exploration/exploitation的常量C并且与该子节点visit times成反比。</li> <li>其次，进行expansion时不会像前面这样直接random选择任意的action，而是这里也考虑到exploration/exploitation，一般前30步根据visit times成正比来选择，这样可以尽可能得先探索（根节点加入了狄利克雷分布保证所有点都经过），后面主要是根据visit times来走了。</li> <li>第三，新版AlphaGo Zero去掉了基于handcraft规则的rollout policy，也就是快速走子网络，以前是必须有快速走子直到完成比赛才能得到反馈，现在是直接基于神经网络计算预估的winer value概率值，然后平均得到每个子节点的state-action value也就是Q值。</li> <li>第四，AlphaGo在MCTS基础上收集最终的比赛结果作为label，MCTS作为policy evalution和policy iteration来实现增强学习。</li> </ul> </li> </ul> <h2 id="counterfactual-regret">Counterfactual Regret</h2> <ul> <li>适用于非信息对称游戏（Imperfect information / Partial information），目标是找到逼近纳什均衡的搜索策略</li> <li>德州扑克AI的常见算法</li> </ul>]]></content><author><name></name></author><category term="理论类笔记"/><category term="理论类笔记"/><summary type="html"><![CDATA[Game Theory]]></summary></entry></feed>