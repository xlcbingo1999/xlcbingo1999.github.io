<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://xlcbingo1999.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://xlcbingo1999.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2024-04-23T06:39:04+00:00</updated><id>https://xlcbingo1999.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">阅读笔记 - (ATC’23)Beware of Fragmentation Scheduling GPU-Sharing Workloads with Fragmentation Gradient Descent</title><link href="https://xlcbingo1999.github.io/blog/2024/ATC23-BoF/" rel="alternate" type="text/html" title="阅读笔记 - (ATC’23)Beware of Fragmentation Scheduling GPU-Sharing Workloads with Fragmentation Gradient Descent"/><published>2024-04-23T00:00:00+00:00</published><updated>2024-04-23T00:00:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2024/ATC23-BoF</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2024/ATC23-BoF/"><![CDATA[<p>Redirecting to Introduction of Introduction of (ATC’23)Beware of Fragmentation Scheduling GPU-Sharing Workloads with Fragmentation Gradient Descent</p>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[Introduction of (ATC'23)Beware of Fragmentation Scheduling GPU-Sharing Workloads with Fragmentation Gradient Descent]]></summary></entry><entry><title type="html">Beware of Fragmentation模拟器</title><link href="https://xlcbingo1999.github.io/blog/2024/BoF-Simulation/" rel="alternate" type="text/html" title="Beware of Fragmentation模拟器"/><published>2024-04-23T00:00:00+00:00</published><updated>2024-04-23T00:00:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2024/BoF-Simulation</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2024/BoF-Simulation/"><![CDATA[<p>Redirecting to Introduction of Beware of Fragmentation模拟器</p>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[Introduction of Beware of Fragmentation模拟器]]></summary></entry><entry><title type="html">GPU集群调度场景定义笔记</title><link href="https://xlcbingo1999.github.io/blog/2024/GPU-approximation/" rel="alternate" type="text/html" title="GPU集群调度场景定义笔记"/><published>2024-04-20T00:00:00+00:00</published><updated>2024-04-20T00:00:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2024/GPU-approximation</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2024/GPU-approximation/"><![CDATA[<p>Redirecting to Introduction of Introduction of GPU集群调度场景定义笔记</p>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[Introduction of GPU集群调度场景定义笔记]]></summary></entry><entry><title type="html">系统级别调度器[Optimus-Gandiva-Tireias]</title><link href="https://xlcbingo1999.github.io/blog/2024/Optimus-Gandiva-Tireias/" rel="alternate" type="text/html" title="系统级别调度器[Optimus-Gandiva-Tireias]"/><published>2024-04-20T00:00:00+00:00</published><updated>2024-04-20T00:00:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2024/Optimus-Gandiva-Tireias</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2024/Optimus-Gandiva-Tireias/"><![CDATA[<p>Redirecting to Introduction of Introduction of GPU集群调度场景定义笔记</p>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[Introduction of 系统级别调度器汇总]]></summary></entry><entry><title type="html">高性能任务级运行时平台 - Legion软件生态</title><link href="https://xlcbingo1999.github.io/blog/2024/Legion-Stack-Intro/" rel="alternate" type="text/html" title="高性能任务级运行时平台 - Legion软件生态"/><published>2024-01-06T00:00:00+00:00</published><updated>2024-01-06T00:00:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2024/Legion-Stack-Intro</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2024/Legion-Stack-Intro/"><![CDATA[<p>Redirecting to Introduction of Legion Software Stack.</p>]]></content><author><name></name></author><category term="Slide"/><category term="系统类笔记"/><summary type="html"><![CDATA[Introduction of Legion Software Stack]]></summary></entry><entry><title type="html">CMake和Makefile相关学习</title><link href="https://xlcbingo1999.github.io/blog/2023/CMake-learning/" rel="alternate" type="text/html" title="CMake和Makefile相关学习"/><published>2023-12-27T17:39:00+00:00</published><updated>2023-12-27T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/CMake-learning</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/CMake-learning/"><![CDATA[<h2 id="cmake">CMake</h2> <h3 id="cmake-通常的-build-和编译位置">CMake 通常的 build 和编译位置</h3> <ul> <li>参考文献：<a href="https://blog.csdn.net/shaoyou223/article/details/84764633">https://blog.csdn.net/shaoyou223/article/details/84764633</a></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 方案1: 创建</span>
<span class="nb">mkdir </span>build
<span class="nb">cd </span>build
cmake ..
make
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 方案2: 直接在主目录下进行</span>
cmake <span class="nt">-S</span> <span class="nb">.</span> <span class="nt">-B</span> build
cmake <span class="nt">--build</span>
</code></pre></div></div> <h3 id="ubuntu-安装-cmake">Ubuntu 安装 CMake</h3> <ul> <li>参考文献：<a href="https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line">https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line</a></li> <li>需要安装新版的 CMake 的时候就需要用这个文章里提到的方法</li> </ul> <h3 id="cmakelists-的编写规则">CMakelists 的编写规则</h3> <ul> <li>号称是全网最全的规则：<a href="https://zhuanlan.zhihu.com/p/534439206">https://zhuanlan.zhihu.com/p/534439206</a></li> </ul> <h3 id="fetchcontent-依赖库">FetchContent 依赖库</h3> <ul> <li>参考文献：<a href="https://juejin.cn/post/7102762548423819272">https://juejin.cn/post/7102762548423819272</a></li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># FetchContent 模块用于获取外部依赖库, 在构建生成文件的过程中被调用
</span><span class="n">include</span><span class="p">(</span><span class="n">FetchContent</span><span class="p">)</span>
<span class="cp"># FetchContent_Declare 描述如何下载依赖库
</span><span class="n">FetchContent_Declare</span><span class="p">(</span>
    <span class="n">pybind11</span>
    <span class="n">GIT_REPOSITORY</span> <span class="n">https</span><span class="o">:</span><span class="c1">//github.com/pybind/pybind11.git</span>
    <span class="n">GIT_TAG</span>        <span class="n">v2</span><span class="mf">.6.2</span>
    <span class="n">GIT_SHALLOW</span>    <span class="n">TRUE</span>
<span class="p">)</span>
<span class="cp"># FetchContent_MakeAvaliable 下载依赖库, 并使其可用
</span><span class="n">FetchContent_MakeAvailable</span><span class="p">(</span><span class="n">pybind11</span><span class="p">)</span>
</code></pre></div></div> <h3 id="cmake-的多版本共存">CMake 的多版本共存</h3> <ul> <li>请不要直接删除 cmake，可能会导致一些文件被删除</li> <li>多版本共存 CMake 参考文献：<a href="https://zhuanlan.zhihu.com/p/442561052">https://zhuanlan.zhihu.com/p/442561052</a></li> </ul> <h3 id="cmakepresets-简化-cmake-项目初始化繁杂步骤">CMakePresets: 简化 CMake 项目初始化繁杂步骤</h3> <ul> <li>参考文献：<a href="https://cloud.tencent.com/developer/article/2348379">https://cloud.tencent.com/developer/article/2348379</a></li> <li> <p>针对不同平台的 CMake 指令主流配置方案</p> <ul> <li>缺点：命令非常长，配置可能不同开发机器上都不一样，对工程在不同设备上编译带来很大的挑战，非常容易编译出错。而且在版本迭代过程中，工程的配置是不断在更新的，很容易忘记去修改 README 或者项目文档导致一些历史的编译脚本缺少一些关键指令丢失内容，这不符合 GitOps 思想。</li> </ul> </li> </ul> <table> <thead> <tr> <th>参数</th> <th>Win</th> <th>Linux</th> <th>macOS</th> <th>iOS</th> <th>Android</th> <th> </th> </tr> </thead> <tbody> <tr> <td>-G [用于指定生成器（Generator），即指定生成的项目文件（例如 Makefile、Visual Studio 项目文件等）的类型]</td> <td>Visual Studio</td> <td>Unix Makefiles</td> <td>Xcode</td> <td>Xcode</td> <td> </td> <td> </td> </tr> <tr> <td>-A [ 用于指定目标平台的体系结构（Architecture）]</td> <td>Win32/x64</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td>-DCMAKE_OSX_ARCHITECTURES [用于定义 CMake 变量]</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td>-DTOOLSETS</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td>-DCMAKE_SYSTEM_NAME</td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> <tr> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> </tr> </tbody> </table> <ul> <li> <p>CMakePreset 的动机</p> <ul> <li>虽然不同的 IDE 或代码编辑器工具有提供一些自己的 CMake 初始化配置能力（如 Visual Studio Code 可通过 .vscode/settings.json 来配置一些默认值）但这都不是通用方案。每个人使用的开发工具都各要求。特别是开源项目，如果没有提供一套全平台对各类工具都支持的配置文件，这会让开发者在工程配置上就被劝退。所以我们期望对项目工程化改造的目标不仅仅是解决上面的痛苦问题，更期望能让开发人员在接手项目时不需要在编译工具链、工程配置上花费太多的心思，让主流的开发工具打开工程开箱即用。</li> <li>为了实现这个目标，CMake 从 3.19 版本就开始支持了 CMakePresets.json 配置。如果你的版本还低于 3.19 请尽快升级来体验下 C/C++ 生态工具链的魅力。</li> </ul> </li> <li> <p>CMakePreset 的几个阶段</p> <ul> <li>configure</li> <li>build</li> <li>test 【可选】</li> <li>package 【可选】</li> </ul> </li> <li> <p>常用的指令</p> <ul> <li><code class="language-plaintext highlighter-rouge">cmake --list-presets</code> ： 查看当前支持的配置</li> <li><code class="language-plaintext highlighter-rouge">cmake --preset=ios-release-arm64</code>：configure</li> <li><code class="language-plaintext highlighter-rouge">cmake --build --preset=ios-release-arm64</code>：build 阶段</li> </ul> </li> <li> <p>一个完整的 Preset 的例子</p> </li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  <span class="s2">"version"</span>: 3,
  <span class="s2">"cmakeMinimumRequired"</span>: <span class="o">{</span>
    <span class="s2">"major"</span>: 3,
    <span class="s2">"minor"</span>: 19,
    <span class="s2">"patch"</span>: 0
  <span class="o">}</span>,
  <span class="s2">"configurePresets"</span>: <span class="o">[</span> <span class="c"># configure阶段的配置</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"hidden"</span>: <span class="nb">true</span>,
      <span class="s2">"condition"</span>: <span class="o">{</span>
        <span class="s2">"type"</span>: <span class="s2">"equals"</span>,
        <span class="s2">"lhs"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">hostSystemName</span><span class="k">}</span><span class="s2">"</span>,
        <span class="s2">"rhs"</span>: <span class="s2">"Darwin"</span>
      <span class="o">}</span>,
      <span class="s2">"generator"</span>: <span class="s2">"Xcode"</span>,
      <span class="s2">"warnings"</span>: <span class="o">{</span><span class="s2">"dev"</span>: <span class="nb">true</span>, <span class="s2">"deprecated"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"OFF"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin 10.14+ (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS - Debug Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"ON"</span>,
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Debug"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/darwin-debug"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin arm64 10.14+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS arm64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-darwin-arm64-realese"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"arm64"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-arm64"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/darwin-release-arm64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-x86_64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin x86_64 10.14+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS x86_64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-darwin-x86_64-realese"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/darwin-release-x86_64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-arm64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS arm64 9.0+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS arm64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-ios-arm64-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"iOS"</span>,
        <span class="s2">"CMAKE_OSX_DEPLOYMENT_TARGET"</span>: <span class="s2">"9.0"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"arm64"</span>,
        <span class="s2">"CMAKE_OSX_SYSROOT"</span>: <span class="s2">"iphoneos"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/ios-arm64-iphoneos"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/ios-release-arm64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-armv7"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS armv7 9.0+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS armv7 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-ios-armv7-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"iOS"</span>,
        <span class="s2">"CMAKE_OSX_DEPLOYMENT_TARGET"</span>: <span class="s2">"9.0"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"armv7"</span>,
        <span class="s2">"CMAKE_OSX_SYSROOT"</span>: <span class="s2">"iphoneos"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/ios-armv7-iphoneos"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/ios-release-armv7"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-x86_64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS x86_64 9.0+ (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS x86_64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-ios-x86_64-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"iOS"</span>,
        <span class="s2">"CMAKE_OSX_DEPLOYMENT_TARGET"</span>: <span class="s2">"9.0"</span>,
        <span class="s2">"CMAKE_OSX_ARCHITECTURES"</span>: <span class="s2">"x86_64"</span>,
        <span class="s2">"CMAKE_OSX_SYSROOT"</span>: <span class="s2">"iphonesimulator"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/ios-x86_64-iphonesimulator"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/ios-release-x86_64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"hidden"</span>: <span class="nb">true</span>,
      <span class="s2">"condition"</span>: <span class="o">{</span>
        <span class="s2">"type"</span>: <span class="s2">"equals"</span>,
        <span class="s2">"lhs"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">hostSystemName</span><span class="k">}</span><span class="s2">"</span>,
        <span class="s2">"rhs"</span>: <span class="s2">"Darwin"</span>
      <span class="o">}</span>,
      <span class="s2">"warnings"</span>: <span class="o">{</span><span class="s2">"dev"</span>: <span class="nb">true</span>, <span class="s2">"deprecated"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"OFF"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86_64 abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86_64 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-x86_64-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"x86_64"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-x86_64-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-x86_64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86 abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86 - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-x86-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"x86"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-x86-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-x86"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android armeabi-v7a abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android armeabi-v7a - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-armeabi-v7a-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"armeabi-v7a"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-armeabi-v7a-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-armeabi-v7a"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-arm64-v8a"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"macos-android"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android arm64-v8a abi21 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android arm64-v8a - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-android-arm64-v8a-release"</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_SYSTEM_NAME"</span>: <span class="s2">"Android"</span>,
        <span class="s2">"CMAKE_SYSTEM_VERSION"</span>: <span class="s2">"21"</span>,
        <span class="s2">"CMAKE_ANDROID_STL_TYPE"</span>: <span class="s2">"c++_static"</span>,
        <span class="s2">"CMAKE_ANDROID_ARCH_ABI"</span>: <span class="s2">"arm64-v8a"</span>,
        <span class="s2">"CMAKE_ANDROID_NDK"</span>: <span class="s2">"</span><span class="nv">$env</span><span class="s2">{HOME}/Library/Android/sdk/ndk/21.4.7075529"</span>,
        <span class="s2">"CONAN_PROFILE_BUILD"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/darwin-x86_64"</span>,
        <span class="s2">"CONAN_PROFILE_HOST"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/.profiles/android-arm64-v8a-abi21"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/android-release-arm64-v8a"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"hidden"</span>: <span class="nb">true</span>,
      <span class="s2">"condition"</span>: <span class="o">{</span>
        <span class="s2">"type"</span>: <span class="s2">"equals"</span>,
        <span class="s2">"lhs"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">hostSystemName</span><span class="k">}</span><span class="s2">"</span>,
        <span class="s2">"rhs"</span>: <span class="s2">"Windows"</span>
      <span class="o">}</span>,
      <span class="s2">"generator"</span>: <span class="s2">"Visual Studio 15 2017"</span>,
      <span class="s2">"warnings"</span>: <span class="o">{</span><span class="s2">"dev"</span>: <span class="nb">true</span>, <span class="s2">"deprecated"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/exports"</span>,
        <span class="s2">"BUILD_TESTING"</span>: <span class="s2">"OFF"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"windows-debug"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows x64 (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Debug Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build"</span>,
      <span class="s2">"architecture"</span>: <span class="o">{</span>
        <span class="s2">"value"</span>: <span class="s2">"x64"</span>,
        <span class="s2">"strategy"</span>: <span class="s2">"set"</span>
      <span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Debug"</span>,
        <span class="s2">"CMAKE_DEBUG_POSTFIX"</span>: <span class="s2">"d"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-x64"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows x64 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-win32-x64"</span>,
      <span class="s2">"architecture"</span>: <span class="o">{</span>
        <span class="s2">"value"</span>: <span class="s2">"x64"</span>,
        <span class="s2">"strategy"</span>: <span class="s2">"set"</span>
      <span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/win32-release-x64"</span>
      <span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-ia32"</span>,
      <span class="s2">"inherits"</span>: <span class="s2">"windows"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows ia32 (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Release Configuration"</span>,
      <span class="s2">"binaryDir"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/build-win32-ia32"</span>,
      <span class="s2">"architecture"</span>: <span class="o">{</span>
        <span class="s2">"value"</span>: <span class="s2">"Win32"</span>,
        <span class="s2">"strategy"</span>: <span class="s2">"set"</span>
      <span class="o">}</span>,
      <span class="s2">"cacheVariables"</span>: <span class="o">{</span>
        <span class="s2">"CMAKE_BUILD_TYPE"</span>: <span class="s2">"Release"</span>,
        <span class="s2">"CMAKE_INSTALL_PREFIX"</span>: <span class="s2">"</span><span class="k">${</span><span class="nv">sourceDir</span><span class="k">}</span><span class="s2">/win32-release-ia32"</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"buildPresets"</span>: <span class="o">[</span> <span class="c"># build阶段的配置</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-debug"</span>, <span class="c"># 依赖的configure阶段</span>
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin Local Compilation (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS - Debug Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Debug"</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-x86_64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Darwin x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for macOS arm64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-arm64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"ios-release-arm64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS arm64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS arm64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-armv7"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"ios-release-armv7"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS armv7 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS armv7 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"ios-release-x86_64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"ios-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"iOS x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for iOS x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86_64-strip"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86_64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86_64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86_64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install/strip"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-x86-strip"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-x86"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android x86 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android x86 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install/strip"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android armeabi-v7a Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android armeabi-v7a - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-armeabi-v7a-strip"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-armeabi-v7a"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android armeabi-v7a Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android armeabi-v7a - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install/strip"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"android-release-arm64-v8a"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"android-release-arm64-v8a"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Android arm64-v8a Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Android arm64-v8a - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"windows-debug"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"windows-debug"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows Local Compilation (Debug)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows - Debug Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Debug"</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-x64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"win32-release-x64"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows x64 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows x64 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"win32-release-ia32"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"win32-release-ia32"</span>,
      <span class="s2">"displayName"</span>: <span class="s2">"Windows ia32 Local Compilation (Release)"</span>,
      <span class="s2">"description"</span>: <span class="s2">"NetEase MSS C wrapper for Windows ia32 - Release Configuration"</span>,
      <span class="s2">"configuration"</span>: <span class="s2">"Release"</span>,
      <span class="s2">"targets"</span>: <span class="o">[</span><span class="s2">"install"</span><span class="o">]</span>
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"testPresets"</span>: <span class="o">[</span> <span class="c"># test阶段的配置</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-debug"</span>,
      <span class="s2">"output"</span>: <span class="o">{</span><span class="s2">"outputOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"execution"</span>: <span class="o">{</span><span class="s2">"noTestsAction"</span>: <span class="s2">"error"</span>, <span class="s2">"stopOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"configurePreset"</span>: <span class="s2">"darwin-release-arm64"</span>,
      <span class="s2">"output"</span>: <span class="o">{</span><span class="s2">"outputOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>,
      <span class="s2">"execution"</span>: <span class="o">{</span><span class="s2">"noTestsAction"</span>: <span class="s2">"error"</span>, <span class="s2">"stopOnFailure"</span>: <span class="nb">true</span><span class="o">}</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="cmake-的-generator-相关知识">CMake 的 Generator 相关知识</h3> <ul> <li>cmake 会通过 cmakelist.txt 文件，生成适用于不同项目类型的 makefile 文件，然后 makefile 文件被不同的编译器使用进行编译，考虑到 C/C++ 的开发环境之多，有非常多的种类的项目开发环境，但是 cmake 基本上都考虑到了，这里做一个小的汇总。 <ul> <li>Visual Studio 6: 生成 Visual Studio 6 工程文件。</li> <li>Visual Studio 7: 生成 Visual Studio .NET 2002 工程文件。</li> <li>Visual Studio 10: 生成 Visual Studio 10(2010) 工程文件。</li> <li>Visual Studio 10 Win64 会生成 x64 平台的工程;Visual Studio 10 IA64 是 Itanium 平台。</li> <li>Visual Studio 11: 生成 Visual Studio 11(2012) 工程文件。</li> <li>Visual Studio 11 Win64 会生成 x64 平台的工程;Visual Studio 11 ARM 是 ARM 平台。</li> <li>Visual Studio 7 .NET 2003: 生成 Visual Studio 7 .NET 2003 工程文件。</li> <li>Visual Studio 8 2005: 生成 Visual Studio 8 2005 工程文件。</li> <li>Visual Studio 8 2005 Win64 会生成 x64 平台的工程。</li> <li>Visual Studio 9 2008: 生成 Visual Studio 9 2008 工程文件。</li> <li>Visual Studio 9 2008 Win64 会生成 x64 平台的工程;Visual Studio 9 2008 IA64 是 Itanium 平台。</li> <li>Borland Makefiles: 生成 Borland makefile。</li> <li>NMake Makefiles: 生成 NMake makefile。</li> <li>NMake Makefiles JOM: 生成 JOM makefile。</li> <li>Watcom WMake: 生成 Watcom WMake makefiles。</li> <li>MSYS Makefiles: 生成 MSYS makefile。 生成的 makefile 用 /bin/sh 作为它的 shell。在运行 CMake 的机器上需要安装 msys</li> <li>MinGW Makefiles: 生成供 mingw32-make 使用的 make file。 生成的 makefile 使用 cmd.exe 作为它的 shell。生成它们不需要 msys 或者 unix shell。</li> <li>Unix Makefiles: 生成标准的 UNIX makefile。 在构建树上生成分层的 UNIX makefile。任何标准的 UNIX 风格的 make 程序都可以通过默认的 make 目标构建工程。生成的 makefile 也提供了 install 目标。</li> <li>Ninja：生成.ninja 工程</li> <li>Xcode：生成 Xcode 工程</li> <li>CodeBlocks - MinGW Makefiles：生成 CodeBlocks 工程。</li> <li>在顶层目录以及每层子目录下为 CodeBlocks 生成工程文件，生成的 CMakeList.txt 的特点是都包含一个 PROJECT()调用。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>CodeBlocks - NMake Makefiles：生成 CodeBlocks 工程。 在顶层目录以及每层子目录下为 CodeBlocks 生成工程文件，生成的 CMakeList.txt 的特点是都包含一个 PROJECT()调用。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>CodeBlocks - Ninja：生成 CodeBlocks 工程。</li> <li>CodeBlocks - Unix Makefiles：生成 CodeBlocks 工程。 在顶层目录以及每层子目录下为 CodeBlocks 生成工程文件，生成的 CMakeList.txt 的特点是都包含一个 PROJECT()调用。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>Eclipse CDT4 - MinGW Makefiles: 生成 Eclipse CDT 4.0 工程文件。 在顶层目录下为 Eclipse 生成工程文件。在运行源码外构建时，一个连接到顶层源码路径的资源文件会被创建。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>Eclipse CDT4 - NMake Makefiles: 生成 Eclipse CDT 4.0 工程文件。 在顶层目录下为 Eclipse 生成工程文件。在运行源码外构建时，一个连接到顶层源码路径的资源文件会被创建。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>Eclipse CDT4 - NMake Makefiles：生成 Eclipse CDT 4.0 工程文件。</li> <li>Eclipse CDT4 - Ninja：生成 Eclipse CDT 4.0 工程文件。</li> <li>Eclipse CDT4 - Unix Makefiles: 生成 Eclipse CDT 4.0 工程文件。 在顶层目录下为 Eclipse 生成工程文件。在运行源码外构建时，一个连接到顶层源码路径的资源文件会被创建。除此之外还会在构建树上生成一套层次性的 makefile。通过默认的 make 目标，正确的 make 程序可以构建这个工程。makefile 还提供了 install 目标。</li> <li>KDevelop3: 生成 KDevelop 3 工程文件。</li> <li>KDevelop3 - Unix Makefiles: 生成 KDevelop 3 工程文件。</li> <li>Sublime Text 2 - MinGW Makefiles: 生成 Sublime Text 2 工程文件。</li> <li>Sublime Text 2 - NMake Makefiles: 生成 Sublime Text 2 工程文件。</li> <li>Sublime Text 2 - Ninja: 生成 Sublime Text 2 工程文件。</li> <li>Sublime Text 2 - Unix Makefiles: 生成 Sublime Text 2 工程文件。</li> </ul> </li> </ul> <h2 id="makefile">Makefile</h2>]]></content><author><name></name></author><category term="技术杂记"/><category term="技术杂记"/><summary type="html"><![CDATA[CMake和Makefile相关学习]]></summary></entry><entry><title type="html">体系结构相关技术</title><link href="https://xlcbingo1999.github.io/blog/2023/Arch/" rel="alternate" type="text/html" title="体系结构相关技术"/><published>2023-11-20T17:39:00+00:00</published><updated>2023-11-20T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/Arch</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/Arch/"><![CDATA[<h2 id="服务器查看物理cpu和逻辑cpu的情况">服务器查看物理cpu和逻辑cpu的情况</h2> <ul> <li>参考文献：<a href="https://blog.csdn.net/maizousidemao/article/details/103595846">https://blog.csdn.net/maizousidemao/article/details/103595846</a></li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l

cat /proc/cpuinfo| grep "cpu cores"| uniq

cat /proc/cpuinfo| grep "processor"| wc -l

grep 'processor' /proc/cpuinfo | sort -u | wc -l
</code></pre></div></div>]]></content><author><name></name></author><category term="技术杂记"/><category term="技术杂记"/><summary type="html"><![CDATA[体系结构相关技术]]></summary></entry><entry><title type="html">阅读笔记 - (MobiCom’23) Cost-effective On-device Continual Learning over Memory Hierarchy with Miro</title><link href="https://xlcbingo1999.github.io/blog/2023/MobiCom23-Miro/" rel="alternate" type="text/html" title="阅读笔记 - (MobiCom’23) Cost-effective On-device Continual Learning over Memory Hierarchy with Miro"/><published>2023-11-12T17:39:00+00:00</published><updated>2023-11-12T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/MobiCom23-Miro</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/MobiCom23-Miro/"><![CDATA[<h2 id="作者优点和问题">作者、优点和问题</h2> <ul> <li>优点 <ul> <li>12 月发现代码开源，很伟大，代码写的算是不错的，结构清晰，代理设置得很好，值得学习：<a href="https://github.com/omnia-unist/Miro">https://github.com/omnia-unist/Miro</a></li> <li>针对持续学习（CL）的新场景提出算法</li> <li>根据持续学习场景中的资源动态变化情况来动态配置 CL 系统，以获得最优的成本效应</li> <li>HEM 可以让数据更加充分地混合？避免 Non-iid 的场景</li> <li>这张图画的很好，体现了“权衡”的特点。也能看出来，accuracy 的边际效应递减，energy 的增长是比较偏线性的</li> </ul> </li> <li>问题： <ul> <li>为什么是多个 task? =&gt; xlc: 感觉这个场景又有点像我之前做的那个隐私预算分配的场景，然后把 cache 加进来…</li> <li>整篇工作基本都是在讲测量的事情，测量的基本基本上都是那种最边界的结果，因此完全不需要任何的算法就写完了这篇文章….</li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/HCfCbR39WowXujxBOx0cEsDxned.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/ByDibeE0aoIfcCxdUcIczgRrnzg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="introduction">Introduction</h2> <ul> <li>CL 范式：随着新数据的到达，模型要从新数据的中逐步学习知识。</li> <li>挑战 <ul> <li>灾难性遗忘（catastrophic forgetting）：在学习新的知识之后很快就遗忘了 =&gt; 解决方案：情景记忆（Episodic Memory, EM），同时基于深度存储器结构（HEM）将存储分为快速访问的小存储器和慢速访问的大存储器 =&gt; xlc: 感觉出现了可以针对内存空间做调度的点了！类似强化学习的 Replay Buffer，只要在讲一下边缘设备具有严格的内存容量限制就可以做调度了……</li> </ul> </li> <li>贡献 <ul> <li>Systematic study of on-device CL：测量</li> <li>System runtime for HEM：从 insight 来优化 HEM 以实现成本增益，主要配置以下表中的参数来获得最优的调度方案 <ul> <li>Capacity：文章描述中对性能影响不太关键，似乎是通过限制 I/O 来实现的【在 <a href="https://we5lw6jk7r.feishu.cn/wiki/N9dmwc1vXiNkf5k0GH5cXKXknKb">Jellyfish Testbed</a> 的源码实现中，似乎可以为每个进程提供独立的带宽约束，这让实验成为可能！】</li> <li>(Accuracy-Energy) Trade-off：对性能影响最大，通过修改 EM size 和 SB size 来实现【】</li> <li>Static：似乎就外部设置？不去进行优化</li> </ul> </li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/X5pKbs4RwoKJKbxOU20cKmFWncg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="continual-learning-on-hem">CONTINUAL LEARNING ON HEM</h2> <h3 id="workflow">Workflow</h3> <ul> <li>简单描述了非层级式的存储结构不能满足速度的需求和空间的需求 <ul> <li><strong>B</strong>uffering：Stream Buffer(SB)的大小需要依赖于任务的学习方法</li> <li><strong>T</strong>raining：训练</li> <li><strong>S</strong>wapping：将 in-memory 的样本和 in-storage 的样本进行交换</li> <li><strong>F</strong>lushing：在 Task N 完成之后，EM 会用 SB 中的样本进行更新，如果 EM 的内存空间不足，HEM 就会使用采样策略。旧的任务应该将一些样本驱逐出去避免对内存空间的占用。SB 中的数据需要被刷到 Storage 中。</li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/O7EabUp3JouJCAxG4vocpRRpnJh.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="data-diversity">Data Diversity</h3> <ul> <li>在 Storage 中的数据有一天也会被使用，避免出现遗忘问题</li> </ul> <h2 id="miro-system-runtime">MIRO: SYSTEM RUNTIME</h2> <h3 id="design-overview">Design Overview</h3> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/GlswbQStGo8SqJxm9hEcu4LenQe.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="data-swapping-strategy">Data Swapping Strategy</h3> <ul> <li>三个原则 <ul> <li>(P1) I/O energy consumption is insignificant. I/O 能耗微不足道。</li> <li>(P2) Increasing the swap ratio provides benefits across a broad range, with a knee point appearing at a relatively low swap ratio (15–20%) in the ratio-accuracy curve, as demonstrated in Figure 6. 提高 swap ratio 可以带来广泛的好处，在 ratio-accuracy curve 中，拐点出现在相对较低的 swap ratio（15-20%）处</li> <li>(P3) Other programs running on the device can abruptly compete for I/O resources. But, under normal circumstances, HW typically allows training jobs to leverage ample bandwidth for full-fledged data swapping. 设备上运行的其他程序可能会突然竞争 I/O 资源。但是，在正常情况下，硬件通常允许训练作业利用充足的带宽来进行全面的数据交换。</li> </ul> </li> <li>实际的 data swapping 算法 <ul> <li>Data swapping 策略：类似 TCP 的拥塞控制，先从 100%-&gt;50%-&gt;25%。Miro 通过首先增加交换间隔来降低交换比率。我们发现更新间隔值对于 100% 到 20% 范围内的 swap ratio 是有利的。然而，对于低于 20% 的掉期比率，我们将间隔固定在 5 个 epoch，并适当调整 swap ratio 以达到所需的 target swap ratio。</li> </ul> </li> </ul> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg-480.webp 480w, /assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg-800.webp 800w, /assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-11-12-MobiCom23-Miro/VyGnb0KqPo1YaZxqxaMcUJGqneg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="stream-buffer-and-em-sizes">Stream Buffer and EM Sizes</h3> <h4 id="our-method">Our Method</h4> <ul> <li>决定 EM 和 SB 的大小的策略：Miro 系统中的 config 选取是一种非常启发式的方案，根据 SB 和 EM 的大小构建一个表，然后每个方法都去试，计算得到$util = \frac{acc\ gain}{energy\ usage}$，然后选择出一个剪切线 cutline，在这个区间里面的可以成为 configs 的候选。【本文是实验验证 20%-50% 的剪切线范围效果比较好】</li> </ul> <h4 id="有借鉴意义profiling-at-low-overhead">[有借鉴意义]Profiling at Low Overhead</h4> <ul> <li>A1) Avoid exhaustive profiling that covers all size variations. Profile a small subset of confs. <ul> <li>本文的解决方案：通过均匀采样实例来减少 conf 的数量。【因为过去的 conf 可能无法表达出未来 conf 的重要性】</li> </ul> </li> <li>A2.1) Do not use the entire training data that includes all stream buffer and EM samples. Use a subset of the data. <ul> <li>本文的解决方案：降低 Training Samples 的数量，</li> </ul> </li> <li>A2.2) Do not go through all epochs. Perform training for a small number of epochs and infer the accuracy that could be obtained if there were many more epochs. <ul> <li>本文的解决方案：降低 Epochs，不需要完整进行 profile【比如只执行 5 个 epoches】，可以考虑像 Optimus 一样进行插值啥的</li> </ul> </li> </ul> <h4 id="tying-all-together-in-miro-workflow">Tying All Together in Miro Workflow</h4>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[阅读笔记 - (MobiCom'23) Cost-effective On-device Continual Learning over Memory Hierarchy with Miro]]></summary></entry><entry><title type="html">阅读笔记 - (NSDI’22) Ekya Continuous Learning of Video Analytics Models on Edge Compute Servers</title><link href="https://xlcbingo1999.github.io/blog/2023/NSDI22-Ekya/" rel="alternate" type="text/html" title="阅读笔记 - (NSDI’22) Ekya Continuous Learning of Video Analytics Models on Edge Compute Servers"/><published>2023-10-17T17:39:00+00:00</published><updated>2023-10-17T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/NSDI22-Ekya</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/NSDI22-Ekya/"><![CDATA[<h2 id="作者优点和问题">作者、优点和问题</h2> <ul> <li>问题 <ul> <li>可否结合 serverless 进来，做 edge serverless continuous learning? =&gt; scale to zero 之后冷启动 load 数据的时间会变得很长，如果有一些预处理和预加载就会好很多了 <ul> <li>参考文章：EAVS: Edge-assisted Adaptive Video Streaming with Fine-grained Serverless Pipelines</li> <li>参考文章：Serverless empowered video analytics for ubiquitous networked cameras</li> </ul> </li> <li>可否重用 cached history models？</li> </ul> </li> <li>优点 <ul> <li>算是针对 Continuous Learning of Video Analytics Models 中进行 GPU 资源分配的开山作品！</li> </ul> </li> </ul> <h2 id="introduction">Introduction</h2> <ul> <li>数据漂移 <ul> <li>解决方案 1：模型压缩</li> <li>解决方案 2：持续模型重训练 <ul> <li>retraining window，</li> <li>tradeoff between the** live inference accuracy** and **drop in accuracy **due to data drift</li> <li>如果可以给更多的资源进行训练，那么更新的模型就可以更快的上线交付使用。如果在推理集群中拿走资源可能会降低推理的准确性【因为为了更好的服务质量，需要计算资源进行预处理】</li> </ul> </li> </ul> </li> <li>论文问题和挑战 <ul> <li>决策变量：在每个 retraining window 中，决策哪些 edge model 需要被重训练； 在重训练任务和推理任务中分配 GPU 资源； 针对重训练和推理任务选择配置方案</li> <li>目标：最大化 retraining window 中的平均推理 acc</li> <li>挑战： <ul> <li>Different from (i) video inference systems that optimize <strong>only the instantaneous accuracy</strong> (ii) model training systems that optimize <strong>only the eventual accuracy</strong></li> <li>The** decision space is multi-dimensional **consisting of a diverse set of retraining and inference configurations, and choices of resource allocations over time.</li> <li>It is difficult to know the **performance **of different configurations (in resource usage and accuracy) as it requires actually retraining using different configurationsI</li> </ul> </li> </ul> </li> <li>论文的贡献 <ul> <li>resource scheduler：（1）GPU 分配按照预先定义的粗粒度分数进行分配； （2）不会在 retraining 阶段去改变分配方案，避免了更复杂的场景； （3）micro-profiler 可以进行剪枝</li> <li>micro-profiler： 测量分配 100% 的 GPU 的时候每个 epoch 的 retraining 持续时间，并根据不同的 epoch、allocation 和 training data size 进行缩放。</li> </ul> </li> </ul> <h2 id="continuous-training-on-edge-compute">Continuous training on edge compute</h2> <h3 id="21-edge-computing-for-video-analytics">2.1 Edge Computing for Video Analytics</h3> <ul> <li>在视频分析任务中采用边缘计算的原因： <ul> <li>Uplink networks to the cloud are expensive</li> <li>Network links out of the edge locations experience outages</li> <li>Videos often contain sensitive and private data that users do not want sent to the cloud</li> </ul> </li> </ul> <h3 id="22-compressed-dnn-models-and-data-drift">2.2 Compressed DNN Models and Data drift</h3> <ul> <li>Data drift <ul> <li>如果使用模型压缩会出现问题</li> </ul> </li> <li>Continuous training <ul> <li>本文对 iCaRL 进行了改进，用于适配 changing characteristics</li> </ul> </li> </ul> <h3 id="23-accuracy-benefits-of-continuous-learning">2.3 Accuracy benefits of continuous learning</h3> <ul> <li>切分 Cityscapes 数据集到固定的 retraining windows 中 =&gt; 其实本质上就是 task 划分 =&gt; 突出一个 non-iid 场景</li> <li>本质上还是在做 CIL？？</li> </ul> <h2 id="3-scheduling-retraining-and-inference-jointly">3 Scheduling retraining and inference jointly</h2> <h3 id="31-configuration-diversity-of-retraining-and-inference">3.1 Configuration diversity of retraining and inference</h3> <h3 id="32-illustrative-scheduling-example">3.2 Illustrative scheduling example</h3> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY-480.webp 480w, /assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY-800.webp 800w, /assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-10-17-NSDI22-Ekya/RwrTbngbCoe0Apx86dbcSfsSnXY.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="4-ekya-solution-description">4 Ekya: Solution Description</h2> <h3 id="41-formulation-of-joint-inference-and-retraining">4.1 Formulation of joint inference and retraining</h3> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf-480.webp 480w, /assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf-800.webp 800w, /assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/2023-10-17-NSDI22-Ekya/AY7VbJEN1oZDWLxLwlTcEDOFnlf.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="42-thief-scheduler">4.2 Thief Scheduler</h3> <ul> <li>问题太复杂了，解耦成 resource allocation (i.e., R and I )和 configuration selection (i.e., γ and λ)</li> </ul> <h2 id="6-evaluation">6 Evaluation</h2> <ul> <li>比较方案：重用 cached history models</li> </ul> <h2 id="8-related-work">8 Related Work</h2> <ul> <li>ML training systems</li> <li>Video processing systems <ul> <li>所有这些工作仅优化 DNN 推理的推理精度或系统/网络成本，这与 Ekya 专注于再训练不同</li> <li>LiveNAS[41]部署连续的再训练来更新视频升级模型，但重点关注有效地将客户端服务器带宽分配给单个视频流的不同子样本。相反，Ekya 专注于 GPU 分配，以最大限度地提高跨多个视频流的重新训练精度。</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[阅读笔记 - (NSDI'22) Ekya Continuous Learning of Video Analytics Models on Edge Compute Servers]]></summary></entry><entry><title type="html">阅读笔记 - (NSDI’23) RECL Responsive Resource-Efficient Continuous Learning for Video Analytics</title><link href="https://xlcbingo1999.github.io/blog/2023/NSDI23-RECL/" rel="alternate" type="text/html" title="阅读笔记 - (NSDI’23) RECL Responsive Resource-Efficient Continuous Learning for Video Analytics"/><published>2023-10-17T17:39:00+00:00</published><updated>2023-10-17T17:39:00+00:00</updated><id>https://xlcbingo1999.github.io/blog/2023/NSDI23-RECL</id><content type="html" xml:base="https://xlcbingo1999.github.io/blog/2023/NSDI23-RECL/"><![CDATA[<h2 id="intro">Intro</h2> <ul> <li>目前面临的问题 <ul> <li>First, continuous retraining consumes the vast majority of compute resources in these video analytics systems (70%–90% in our study) [20, 21], making model retraining the key bottleneck in scaling video analytics to more video streams with limited compute resources. Our study (Fig. 2) shows that accuracy drops sharply (by 40% in object detection) as 4× more cameras share the GPU cycles to retrain their models (§2.2).</li> <li>Second, it takes time to retrain specialized DNNs, and abrupt video scene changes inevitably lead to drastic accuracy drops until the retraining is completed (see Fig. 3 for an example).</li> </ul> </li> <li>Motivation <ul> <li>重训练需要花费时间，因此可以<strong>重用</strong>过去数据训练的 DNN 来处理 【因为很多过去的数据具有时间空间上的一致性】</li> </ul> </li> <li>挑战 <ul> <li>第一，需要快速地找到特定的 DNN 可以满足需求 =&gt; 如何说明一个 DNN 是好的呢？</li> <li>第二，需要让重用模型的时间远低于重新训练模型 =&gt; 寻找重用模型的成本高于直接重新训练模型，因为会随着数据的增长，可以重用的模型就变多了</li> </ul> </li> <li>解决方案 <ul> <li>总论：针对资源受限场景中的视频分析持续学习场景，将模型重用考虑进来。</li> <li>贡献点 1：使用 MoE 方法作为模型选择器，允许 RECL 去基于视频分析任务和视频场景选择模型</li> <li>贡献点 2：RECL 为不同的边缘设备分享 model zoo，支持动态增加新的 expert</li> <li>贡献点 3：retraining jobs 之间共享 GPU 资源，设计一套调度算法去处理</li> </ul> </li> <li>效果 <ul> <li>Object detection mAP 的提升</li> <li>在获取相同 mAP 条件下，时间得到了缩短</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="论文阅读笔记"/><category term="系统-ML任务级调度论文集合"/><summary type="html"><![CDATA[阅读笔记 - (NSDI'23) RECL Responsive Resource-Efficient Continuous Learning for Video Analytics]]></summary></entry></feed>